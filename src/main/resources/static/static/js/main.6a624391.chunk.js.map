{"version":3,"sources":["img/bob_covid_large.jpg","img/social-distancing-together-6-feet.webp","img/cartoon.jpg","App.module.css","img/touch.jpg","img/Coronavirus-EN-2.png","img/download.jfif","img/original.jfif","components/Cards/Cards.module.css","components/Cards/Card/Card.module.css","img/cuong.png","img/zach.png","img/nick.png","img/joe.png","img/damon.png","img/be-kind-to-support.jpg","components/Chart/Chart.module.css","api/index.js","components/Chart/Chart.jsx","components/SearchBar/SearchBar.jsx","components/SearchBar/CountyList.js","components/SearchBar/SearchPage.js","components/Legend/Legend.jsx","components/Cards/Card/Card.jsx","components/USMap/USMaps.jsx","components/Combine/Combine.jsx","components/NavBar/Nav.jsx","components/News/NewsItem.js","components/News/News.js","components/Infos/Infos.jsx","pages/home.js","pages/details.js","pages/About.js","pages/Symptom.js","pages/Vaccine.js","pages/Infos.js","App.js","index.js","img/spread.png"],"names":["module","exports","url1","mapurl","fetchUSByDate","date","a","changeableUrl","axios","get","data","fetchUSByDateRange","startDate","endDate","map","stats","fetchStateNoCountiesByDateRange","stateName","fetchAllStatesByDate","fetchCountyByDate","state","console","log","fetchCountyByDateRange","countyName","testLastWeek","Date","testLastMonth","testLastYear","ifState","Chart","country","nbdate","cond","sname","width","height","useState","dailyData","setDailyData","weekData","setWeekData","monthData","setMonthData","year","parseInt","substring","month","day","toString","length","setDateBackMonth","setDateBackWeek","setDateBackYear","useEffect","nbDataRange","nbDataRangeWeek","nbDataRangeMonth","countyDataWeek","countyDataMonth","countyData","nbStateDataWeek","nbStateDataMonth","nbStateData","fetchMyAPI","lineChart1","lineChart2","lineChart3","lineChart1Cases","labels","toLocaleDateString","datasets","cases","label","borderColor","backgroundColor","fill","options","legend","display","reverse","title","text","lineChart2Cases","lineChart3Cases","lineChart1Deaths","deaths","lineChart2Deaths","lineChart3Deaths","lineChart1NewCases","newCases","lineChart2NewCases","lineChart3NewCases","LineChart1VaccNew","vaccinesDistributed","firstDose","secondDose","dailyVaccinated","LineChart2VaccNew","LineChart3VaccNew","lineChart1Hosp","hospitalized","lineChart2Hosp","lineChart3Hosp","style","margin","SearchBar","keyword","input","updateInput","onChange","onSearchBlur","onBlur","onSearchKeyUp","onKeyPress","BarStyling","background","border","padding","key","value","placeholder","list","e","target","CountyList","countyList","id","className","index","class","data-innput","onClick","tabindex","stateData","require","SearchPage","setCond","setInput","countyListDefault","setCountyListDefault","setCountyList","stateListDefault","setStateListDefault","stateList","setStateList","fetchData","countylist_temp","entries","Object","counties","county","push","stateZoom","includes","county_str","slice","indexOf","toLowerCase","replace","state_str","cond_str","setTimeout","document","getElementById","dispatchEvent","Event","filtered","filter","startsWith","concat","classList","add","remove","blur","countyValues","percents","i","min","Math","apply","max","interval","stateValues","states","name","CardComponent","cardTitle","lastUpdate","cardSubtitle","Grid","item","xs","md","component","Paper","cx","styles","card","CardContent","Typography","color","gutterBottom","variant","marginBottom","start","end","duration","separator","USMaps","toggleState","setToggleState","toggleTab","check2","setcheck2","curstate","setsname","snamestate","setsnamestate","myRef","useRef","statedata","setMapData","us","setus","setcheck","data2","setData2","check1","setcheck1","ccases","setccases","cdeath","setcdeath","cnewc","setcnewc","cvac","setcvac","chos","setchos","setState","setCounty","setColor","domain","setDomain","countyCaseDomain","undefined","countyDeathDomain","countyNewDomain","stateDomain","blues","greens","reds","purples","pinks","countyColorCases","d3","range","countyColorRecovered","countyColorDeaths","countyColorVac","countyColorHosp","stateColor","active","Promise","all","then","usa","check","datas","data3","updatedata","svg","current","select","append","attr","on","clicked","projection","translate","scale","path","g","topojson","objects","features","forEach","f","props","find","d","fips","selectAll","enter","reset","countytip","show","this","hide","color0","color1","color2","color3","color4","domain0","toFixed","domain1","domain2","domain3","domain4","casesPercent","newCasesPercent","deathsPercent","secondDosePercent","hospitalizedPercent","statetip","datum","b","d3tip","offset","html","call","peopleVaccinated","node","classed","bounds","dx","dy","x","y","transition","delay","window","oncontextmenu","exit","container","spacing","justify","Card","stylescard","infected","recovered","vaccinated","details","button1","mylegend","legendtitle","legendscale","legendlabels","innerWidth","innerHeight","ref","Combine","addDays","setStartDate","years","getYear","months","settest","currentDate","moment","format","march7","jan21","premarch7","parse","Jan12","prejan12","test","setDate","getDate","search","btnContainer","skewBtn","blue","green","red","pink","purple","renderCustomHeader","changeYear","changeMonth","decreaseMonth","increaseMonth","prevMonthButtonDisabled","nextMonthButtonDisabled","justifyContent","disabled","option","getMonth","selected","maxDate","minDate","witdh","Nav","textDecoration","to","fontSize","marginTop","marginRight","NewsItem","description","url","urlToImage","src","alt","href","News","articles","setArticles","Axios","res","getArticles","Infos","overflow","scrollElement","home","About","textAlign","cuong","zach","nick","damon","joe","borderRadius","Symptom","Spread","Doctor","CleanHand","Distance","Touch","Cover","Stayhome","Call","Support","Vaccine","App","exact","Detail","ReactDOM","render"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,gE,oBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCC3CD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,OAAS,oBAAoB,KAAO,kBAAkB,QAAU,qBAAqB,MAAQ,mBAAmB,SAAW,sBAAsB,YAAc,yBAAyB,aAAe,0BAA0B,YAAc,yBAAyB,OAAS,oBAAoB,OAAS,oBAAoB,QAAU,qBAAqB,QAAU,qBAAqB,aAAe,0BAA0B,QAAU,qBAAqB,KAAO,kBAAkB,MAAQ,mBAAmB,IAAM,iBAAiB,OAAS,oBAAoB,KAAO,oB,oBCD5mBD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,8C,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCC3CD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,sBAAsB,aAAe,4BAA4B,WAAa,4B,oBCAtND,EAAOC,QAAU,CAAC,KAAO,mBAAmB,uBAAuB,qC,oBCDnED,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,gD,0DCC3CD,EAAOC,QAAU,CAAC,UAAY,2B,47pDCExBC,EAAO,wBACPC,EAAS,aAqCFC,EAAa,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DACrBC,EAAgBL,EAEhBG,IACAE,EAAa,UAAML,GAAN,OAAaC,EAAb,yBAAoCE,IAJ5B,kBASFG,IAAMC,IAAIF,GATR,cASfG,EATe,yBAUdA,EAAKA,MAVS,wHAAH,sDAgBbC,EAAkB,uCAAG,WAAMC,EAAWC,GAAjB,mBAAAP,EAAA,6DAC1BC,EAAgBJ,EAEhBS,GAAaC,IACbN,EAAa,UAAML,GAAN,OAAaC,EAAb,+BAA0CS,EAA1C,iBAA4DC,IAJ/C,kBASLL,IAAMC,IAAIF,GATL,uBAa1BG,GAJMA,EAToB,EASpBA,MAIMI,KAAI,kBAAsB,CAAEC,MAAxB,EAAGA,MAA4BV,KAA/B,EAAUA,SAbA,kBAenBK,GAfmB,2HAAH,wDAsBlBM,EAA+B,uCAAG,WAAMJ,EAAWC,EAASI,GAA1B,mBAAAX,EAAA,6DACvCC,EAAgBJ,EAEhBS,GAAaC,GAAWI,IACxBV,EAAa,UAAML,GAAN,OAAaC,EAAb,4CAAuDS,EAAvD,iBAAyEC,EAAzE,mBAA2FI,IAJjE,kBAShBT,IAAMC,IAAIF,GATM,uBAS/BG,EAT+B,EAS/BA,KAT+B,kBAchCA,GAdgC,2HAAH,0DA6D/BQ,EAAoB,uCAAG,WAAMb,GAAN,iBAAAC,EAAA,6DAC5BC,EAAgBJ,EAEhBE,IACAE,EAAa,UAAML,GAAN,OAAaC,EAAb,gCAA2CE,IAJ5B,kBASTG,IAAMC,IAAIF,GATD,cAStBG,EATsB,yBAUrBA,EAAKA,MAVgB,2HAAH,sDAiBpBS,EAAiB,uCAAG,WAAMC,EAAOf,GAAb,iBAAAC,EAAA,6DACzBC,EAAgBJ,EAChBE,IACAE,EAAa,UAAML,GAAN,OAAaC,EAAb,+BAA0CE,EAA1C,mBAAyDe,GACtEC,QAAQC,IAAIf,IAJa,kBAQNC,IAAMC,IAAIF,GARJ,cAQnBG,EARmB,OASzBW,QAAQC,IAAIZ,EAAKA,MACjBW,QAAQC,IAAIZ,EAAKA,KAAKU,OAVG,kBAWlBV,EAAKA,MAXa,2HAAH,wDAiBjBa,EAAsB,uCAAG,WAAMX,EAAWC,EAASI,EAAWO,GAArC,iBAAAlB,EAAA,6DAC9BC,EAAgBJ,EACjBS,GAAaC,GAAWW,IACvBjB,EAAa,UAAML,GAAN,OAAaC,EAAb,mCAA8CS,EAA9C,iBAAgEC,EAAhE,mBAAkFI,EAAlF,oBAAuGO,GACpHH,QAAQC,IAAIf,IAJkB,kBAOXC,IAAMC,IAAIF,GAPC,cAOxBG,EAPwB,OAQ9BW,QAAQC,IAAIZ,GARkB,kBASvBA,EAAKA,MATkB,2HAAH,4DChK/Be,G,OALO,IAAIC,KACH,IAAIA,KACJ,IAAIA,KAGG,IAAIA,MACnBC,EAAgB,IAAID,KACpBE,EAAe,IAAIF,KASvB,IAAIG,GAAU,EAmEd,IAgpBeC,EAhpBD,SAAC,GAA+D,IAA9DC,EAA6D,EAA7DA,QAASC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,KAAMT,EAAsC,EAAtCA,WAAYU,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OAAY,EAGvCC,mBAAS,IAH8B,mBAGlEC,EAHkE,KAGvDC,EAHuD,OAIzCF,mBAAS,IAJgC,mBAIlEG,EAJkE,KAIxDC,EAJwD,OAKvCJ,mBAAS,IAL8B,mBAKlEK,EALkE,KAKvDC,EALuD,KAQzEhB,EAjEJ,SAA0BtB,GACtB,IAAIuC,EAAOC,SAASxC,EAAKyC,UAAU,EAAE,IACjCC,EAAQF,SAASxC,EAAKyC,UAAU,EAAE,GAAG,GACrCE,EAAMH,SAASxC,EAAKyC,UAAU,EAAE,KAYpC,OAVGC,EAAQ,IACPH,IACAG,EAAQ,IAGTA,EAAME,WAAWC,OAAO,IACvBH,EAAQ,IAAMA,GACfC,EAAIC,WAAWC,OAAO,IACrBF,EAAM,IAAMA,GAETJ,EAAO,IAAIG,EAAM,IAAIC,EAkDZG,CAAiBnB,GACjCP,EAnCJ,SAAyBpB,GACrB,IAAIuC,EAAOC,SAASxC,EAAKyC,UAAU,EAAE,IACjCC,EAAQF,SAASxC,EAAKyC,UAAU,EAAE,IAClCE,EAAMH,SAASxC,EAAKyC,UAAU,EAAE,IAAI,GAkBxC,OAhBGE,EAAM,IACLD,IAEAC,EADW,GAAKA,GAIjBD,EAAQ,IACPH,IACAG,EAAQ,IAGTA,EAAME,WAAWC,OAAO,IACnBH,EAAQ,IAAMA,GACnBC,EAAIC,WAAWC,OAAO,IACjBF,EAAM,IAAMA,GAEbJ,EAAO,IAAIG,EAAM,IAAIC,EAcbI,CAAgBpB,GAC/BJ,EAjDJ,SAAyBvB,GACrB,IAAIuC,EAAOC,SAASxC,EAAKyC,UAAU,EAAE,GAAG,GACpCC,EAAQF,SAASxC,EAAKyC,UAAU,EAAE,IAClCE,EAAMH,SAASxC,EAAKyC,UAAU,EAAE,KAOhC,OALDC,EAAME,WAAWC,OAAO,IACnBH,EAAQ,IAAMA,GACfC,EAAIC,WAAWC,OAAO,IACrBF,EAAM,IAAMA,GAETJ,EAAO,IAAIG,EAAM,IAAIC,EAuCjBK,CAAgBrB,GAM3BH,EADS,QAAVK,EAKe,OAAfV,EAMH8B,qBAAU,YACU,uCAAG,4CAAAhD,EAAA,sEAEWK,EAAmBiB,EAAcI,GAF5C,cAETuB,EAFS,gBAGe5C,EAAmBc,EAAcO,GAHhD,cAGTwB,EAHS,gBAIgB7C,EAAmBgB,EAAeK,GAJlD,UAITyB,EAJS,OAiBbpC,QAAQC,IAAIE,GAGI,OAAfA,EApBY,kCAqB8BD,EAAuBE,EAAcO,EAAQD,EAASP,GArBpF,eAqBOkC,EArBP,iBAsB+BnC,EAAuBI,EAAeK,EAAQD,EAASP,GAtBtF,eAsBOmC,EAtBP,iBAuB0BpC,EAAuBK,EAAcI,EAAQD,EAASP,GAvBhF,QAuBOoC,EAvBP,OAwBCvC,QAAQC,IAAIsC,GAEZnB,EAAYiB,GACZf,EAAagB,GACbpB,EAAaqB,GA5Bd,4BA8BK/B,EA9BL,kCA+B+Bb,EAAgCS,EAAcO,EAAQD,GA/BrF,eA+BO8B,EA/BP,iBAgCgC7C,EAAgCW,EAAeK,EAAQD,GAhCvF,eAgCO+B,EAhCP,iBAiC2B9C,EAAgCY,EAAcI,EAAQD,GAjCjF,QAiCOgC,EAjCP,OAkCCtB,EAAYoB,GACZlB,EAAamB,GACbvB,EAAawB,GApCd,wBAuCCtB,EAAYe,GACZb,EAAac,GACblB,EAAagB,GAzCd,4CAAH,qDAgDhBS,KACD,CAACjC,EAASP,IAEb8B,qBAAU,YACU,uCAAG,4CAAAhD,EAAA,6DAGXuB,EADS,QAAVK,EAMe,OAAfV,EARY,SAceb,EAAmBc,EAAcO,GAdhD,cAcTwB,EAdS,gBAegB7C,EAAmBgB,EAAeK,GAflD,cAeTyB,EAfS,iBAgBW9C,EAAmBiB,EAAcI,GAhB5C,WAgBTuB,EAhBS,OA4BflC,QAAQC,IAAIE,GACZH,QAAQC,IAAIS,GAEM,OAAfP,EA/BY,kCAgCkBD,EAAuBE,EAAcO,EAAQD,EAASP,GAhCxE,eAgCLkC,EAhCK,iBAiCmBnC,EAAuBI,EAAeK,EAAQD,EAASP,GAjC1E,eAiCLmC,EAjCK,iBAkCcpC,EAAuBK,EAAcI,EAAQD,EAASP,GAlCpE,QAkCLoC,EAlCK,OAmCXvC,QAAQC,IAAIsC,GACZnB,EAAYiB,GACZf,EAAagB,GACbpB,EAAaqB,GAtCF,4BAwCP/B,EAxCO,kCAyCmBb,EAAgCS,EAAcO,EAAQD,GAzCzE,eAyCL8B,EAzCK,iBA0CoB7C,EAAgCW,EAAeK,EAAQD,GA1C3E,eA0CL+B,EA1CK,iBA2Ce9C,EAAgCY,EAAcI,EAAQD,GA3CrE,QA2CLgC,EA3CK,OA4CXtB,EAAYoB,GACZlB,EAAamB,GACbvB,EAAawB,GA9CF,wBAiDXtB,EAAYe,GACZb,EAAac,GACblB,EAAagB,GAnDF,4CAAH,qDA0DhBS,KACD,CAAChC,EAAQD,EAASP,IAErB,IAAIyC,EAAa,KACbC,EAAa,KACbC,EAAa,KAIXC,EACF9B,EAAU,GACN,kBAAC,IAAD,CAAMH,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ/B,EAAUxB,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBACnDC,SAAU,CAAC,CACP7D,KAAM4B,EAAUxB,KAAI,qBAAGC,MAAkB,GAAGyD,SAC5CC,MAAO,QACPC,YAAa,UACbC,gBAAiB,uBACjBC,MAAM,KAIdC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAOC,SAAS,GACnCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,sBAGpC,KAKFiD,EACFzC,EAAU,GACN,kBAAC,IAAD,CAAMP,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ3B,EAAU5B,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBACnDC,SAAU,CAAC,CACP7D,KAAMgC,EAAU5B,KAAI,qBAAGC,MAAkB,GAAGyD,SAC5CC,MAAO,QACPC,YAAa,OACbC,gBAAiB,uBACjBC,MAAM,KAIdC,QAAS,CACLC,OAAQ,CAAEC,SAAS,GACnBE,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,uBAGpC,KAGFkD,EACF5C,EAAS,GACL,kBAAC,IAAD,CAAML,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ7B,EAAS1B,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBAClDC,SAAU,CAAC,CACP7D,KAAM8B,EAAS1B,KAAI,qBAAGC,MAAkB,GAAGyD,SAC3CC,MAAO,QACPC,YAAa,OACbC,gBAAiB,uBACjBC,MAAM,KAIdC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAOC,SAAS,GACnCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,sBAGpC,KAEFmD,EACF/C,EAAU,GACN,kBAAC,IAAD,CAAMH,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ/B,EAAUxB,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBACnDC,SAAU,CAAC,CACP7D,KAAM4B,EAAUxB,KAAI,qBAAGC,MAAkB,GAAGuE,UAC5Cb,MAAO,SACPC,YAAa,uBACbC,gBAAiB,uBACjBC,MAAM,KAIdC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAOC,SAAS,GACnCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,uBAGpC,KAEFqD,EACF7C,EAAU,GACN,kBAAC,IAAD,CAAMP,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ3B,EAAU5B,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBACnDC,SAAU,CAAC,CACP7D,KAAMgC,EAAU5B,KAAI,qBAAGC,MAAkB,GAAGuE,UAC5Cb,MAAO,SACPC,YAAa,uBACbC,gBAAiB,uBACjBC,MAAM,KAIdC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAOC,SAAS,GACnCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,wBAGpC,KAEFsD,EACFhD,EAAS,GACL,kBAAC,IAAD,CAAML,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ7B,EAAS1B,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBAClDC,SAAU,CAAC,CACP7D,KAAM8B,EAAS1B,KAAI,qBAAGC,MAAkB,GAAGuE,UAC3Cb,MAAO,SACPC,YAAa,uBACbC,gBAAiB,uBACjBC,MAAM,KAIdC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAOC,SAAS,GACnCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,uBAGpC,KAGFuD,EACFnD,EAAU,GACN,kBAAC,IAAD,CAAMH,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ/B,EAAUxB,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBACnDC,SAAU,CAAC,CACP7D,KAAM4B,EAAUxB,KAAI,qBAAGC,MAAkB,GAAG2E,YAC5CjB,MAAO,YACPC,YAAa,uBACbC,gBAAiB,uBACjBC,MAAM,KAIdC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAOC,SAAS,GACnCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,0BAGpC,KAEFyD,EACFjD,EAAU,GACN,kBAAC,IAAD,CAAMP,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ3B,EAAU5B,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBACnDC,SAAU,CAAC,CACP7D,KAAMgC,EAAU5B,KAAI,qBAAGC,MAAkB,GAAG2E,YAC5CjB,MAAO,YACPC,YAAa,uBACbC,gBAAiB,uBACjBC,MAAM,KAIdC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAOC,SAAS,GACnCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,2BAGpC,KAEF0D,EACFpD,EAAS,GACL,kBAAC,IAAD,CAAML,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ7B,EAAS1B,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBAClDC,SAAU,CAAC,CACP7D,KAAM8B,EAAS1B,KAAI,qBAAGC,MAAkB,GAAG2E,YAC3CjB,MAAO,YACPC,YAAa,uBACbC,gBAAiB,uBACjBC,MAAM,KAIdC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAOC,SAAS,GACnCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,0BAGpC,KAmEF2D,EACFvD,EAAU,GACN,kBAAC,IAAD,CAAMH,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ/B,EAAUxB,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBACnDC,SAAU,CACN,CACI7D,KAAM4B,EAAUxB,KAAI,qBAAGC,MAAkB,GAAG+E,uBAC5CrB,MAAO,uBACPC,YAAa,uBACbE,MAAM,GAEV,CACIlE,KAAM4B,EAAUxB,KAAI,qBAAGC,MAAkB,GAAGgF,aAC5CtB,MAAO,aACPC,YAAa,uBACbE,MAAM,GAEV,CACIlE,KAAM4B,EAAUxB,KAAI,qBAAGC,MAAkB,GAAGiF,cAC5CvB,MAAO,cACPC,YAAa,uBACbE,MAAM,GAEV,CACIlE,KAAM4B,EAAUxB,KAAI,qBAAGC,MAAkB,GAAGkF,mBAC5CxB,MAAO,qBACPC,YAAa,wBACbE,MAAM,KAIlBC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAMC,SAAS,GAClCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,yBAGpC,KAEFgE,EACExD,EAAU,GACN,kBAAC,IAAD,CAAMP,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ3B,EAAU5B,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBACnDC,SAAU,CACN,CACI7D,KAAMgC,EAAU5B,KAAI,qBAAGC,MAAkB,GAAG+E,uBAC5CrB,MAAO,uBACPC,YAAa,uBACbE,MAAM,GAEV,CACIlE,KAAMgC,EAAU5B,KAAI,qBAAGC,MAAkB,GAAGgF,aAC5CtB,MAAO,aACPC,YAAa,uBACbE,MAAM,GAEV,CACIlE,KAAMgC,EAAU5B,KAAI,qBAAGC,MAAkB,GAAGiF,cAC5CvB,MAAO,cACPC,YAAa,uBACbE,MAAM,GAEV,CACIlE,KAAMgC,EAAU5B,KAAI,qBAAGC,MAAkB,GAAGkF,mBAC5CxB,MAAO,qBACPC,YAAa,wBACbE,MAAM,KAIlBC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAMC,SAAS,GAClCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,kCAGpC,KAEFiE,EACE3D,EAAS,GACL,kBAAC,IAAD,CAAML,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ7B,EAAS1B,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBAClDC,SAAU,CACN,CACI7D,KAAM8B,EAAS1B,KAAI,qBAAGC,MAAkB,GAAG+E,uBAC3CrB,MAAO,uBACPC,YAAa,uBACbE,MAAM,GAEV,CACIlE,KAAM8B,EAAS1B,KAAI,qBAAGC,MAAkB,GAAGgF,aAC3CtB,MAAO,aACPC,YAAa,uBACbE,MAAM,GAEV,CACIlE,KAAM8B,EAAS1B,KAAI,qBAAGC,MAAkB,GAAGiF,cAC3CvB,MAAO,cACPC,YAAa,uBACbE,MAAM,GAEV,CACIlE,KAAM8B,EAAS1B,KAAI,qBAAGC,MAAkB,GAAGkF,mBAC3CxB,MAAO,qBACPC,YAAa,wBACbE,MAAM,KAIlBC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAMC,SAAS,GAClCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,iCAGpC,KAGVkE,EACF9D,EAAU,GACN,kBAAC,IAAD,CAAMH,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ/B,EAAUxB,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBACnDC,SAAU,CAAC,CACP7D,KAAM4B,EAAUxB,KAAI,qBAAGC,MAAkB,GAAGsF,gBAC5C5B,MAAO,mBACPC,YAAa,yBACbC,gBAAiB,yBACjBC,MAAM,KAIdC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAOC,SAAS,GACnCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,iCAGpC,KAEFoE,EACF5D,EAAU,GACN,kBAAC,IAAD,CAAMP,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ3B,EAAU5B,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBACnDC,SAAU,CAAC,CACP7D,KAAMgC,EAAU5B,KAAI,qBAAGC,MAAkB,GAAGsF,gBAC5C5B,MAAO,mBACPC,YAAa,yBACbC,gBAAiB,yBACjBC,MAAM,KAIdC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAOC,SAAS,GACnCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,kCAGpC,KAEFqE,EACF/D,EAAS,GACL,kBAAC,IAAD,CAAML,MAAOA,EAAOC,OAAQA,EACxB1B,KAAM,CACF2D,OAAQ7B,EAAS1B,KAAI,gBAAGT,EAAH,EAAGA,KAAH,OAAc,IAAIqB,KAAKrB,GAAMiE,wBAClDC,SAAU,CAAC,CACP7D,KAAM8B,EAAS1B,KAAI,qBAAGC,MAAkB,GAAGsF,gBAC3C5B,MAAO,mBACPC,YAAa,yBACbC,gBAAiB,yBACjBC,MAAM,KAIdC,QAAS,CACLC,OAAQ,CAAEC,SAAS,EAAOC,SAAS,GACnCC,MAAO,CAAEF,SAAS,EAAMG,KAAK,GAAD,OAAKhD,EAAL,iCAGpC,KA2CR,MAtCY,UAATD,GAECgC,EAAaG,EACbF,EAAaiB,EACbhB,EAAaiB,GAEA,WAATnD,GAGJgC,EAAaoB,EACbnB,EAAaqB,EACbpB,EAAaqB,GAEA,aAATvD,GAEJgC,EAAawB,EACbvB,EAAayB,EACbxB,EAAayB,GAEA,iBAAT3D,GAMJgC,EAAa4B,EACb3B,EAAagC,EACb/B,EAAagC,GAEA,qBAATlE,IAEJgC,EAAamC,EACblC,EAAaoC,EACbnC,EAAaoC,GAMb,6BACI,yBAAKC,MAAO,CAAEC,OAAQ,SAClB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,gBACA,kBAAC,IAAD,iBACA,kBAAC,IAAD,iBAGJ,kBAAC,IAAD,KACKvE,GAASiC,GAEd,kBAAC,IAAD,KACSjC,GAASgC,GAElB,kBAAC,IAAD,KACKhC,GAAS+B,O,gJC9sBnByC,EAhBG,SAAC,GAA0F,IAAnFC,EAAkF,EAAxFC,MAAwBC,EAAgE,EAAzEC,SAA6BC,EAA4C,EAAnDC,OAAgCC,EAAmB,EAA9BC,WACpEC,EAAU,aAAIhF,MAAM,QAAQiF,WAAW,UAAWC,OAAO,OAAQC,QAAQ,UAA/D,QAA+E,SAC/F,OACI,2BACId,MAAOW,EACPI,IAAI,OACJC,MAAOb,EACPc,YAAa,SACbC,KAAK,cACLZ,SAAU,SAACa,GAAD,OAAOd,EAAYc,EAAEC,OAAOJ,QACtCR,OAAQ,SAACW,GAAD,OAAOZ,EAAaY,EAAEC,OAAOJ,QACrCN,WAAY,SAACS,GAAD,OAAOV,EAAcU,OCuB9BE,G,OAhCI,SAAC,GAAqB,IAAD,IAAnBC,kBAAmB,MAAR,GAAQ,EAItC,OACE,yBAAKC,GAAG,sBAAsBC,UAAU,mBACtCF,EAAWhH,KAAI,SAACJ,EAAKuH,GACnB,OAAIvH,EAEA,6BACE,yBAAKwH,MAAM,kBAAkBX,IAAK7G,EAAO,WAAYyH,cAAazH,EAAO,WAAY0H,QAAS,SAACT,KAA0BU,SAAS,KAChI,8BAAO3H,GADT,IACsB,0BAAMwH,MAAM,mCAAZ,YAEtB,yBAAKA,MAAM,kBAAkBX,IAAK7G,EAAO,eAAgByH,cAAazH,EAAO,eAAgB0H,QAAS,SAACT,KAA0BU,SAAS,KACxI,8BAAO3H,GADT,IACsB,0BAAMwH,MAAM,uCAAZ,gBAEtB,yBAAKA,MAAM,kBAAkBX,IAAK7G,EAAO,YAAayH,cAAazH,EAAO,YAAa0H,QAAS,SAACT,KAA0BU,SAAS,KAClI,8BAAO3H,GADT,IACsB,0BAAMwH,MAAM,oCAAZ,aAEtB,yBAAKA,MAAM,kBAAkBX,IAAK7G,EAAO,kBAAmByH,cAAazH,EAAO,kBAAmB0H,QAAS,SAACT,KAA0BU,SAAS,KAC9I,8BAAO3H,GADT,IACsB,0BAAMwH,MAAM,kCAAZ,kBAKvB,WCvBPI,EAAYC,EAAQ,KACpB3E,EAAa2E,EAAQ,KAmB3B,IAgIeC,EAhII,SAAC,GAAoB,EAAnBvG,KAAoB,IAAdwG,EAAa,EAAbA,QAAa,EACZpG,mBAAS,IADG,mBAC/BuE,EAD+B,KACxB8B,EADwB,OAEYrG,qBAFZ,mBAE/BsG,EAF+B,KAEZC,EAFY,OAGFvG,qBAHE,mBAGnBwG,GAHmB,aAKUxG,qBALV,mBAK/ByG,EAL+B,KAKbC,EALa,OAMJ1G,qBANI,mBAM/B2G,EAN+B,KAMpBC,EANoB,KAUhCC,EAAS,uCAAG,8CAAA5I,EAAA,sDAGhB,IAFI6I,EAAkB,GAClBC,EAAUC,OAAOD,QAAQxF,GACzB,EAAJ,IAA+BwF,EAA/B,eAAyC,CAAC,EAAD,oBAA9BhI,EAA8B,KAAvBkI,EAAuB,mBACnBA,GADmB,IACvC,IAAI,EAAJ,qBAAUC,EAAoB,QAC5BJ,EAAgBK,KAAKD,EAAS,KAAOnI,GAFA,+BAKzCyH,EAAc,IACdD,EAAqBO,GACrBF,EAAa,IACbF,EAAoBT,EAAU5H,MAXd,2CAAH,qDA6CT+I,EAAY,SAAS7C,GACzB,GAAIA,EAAM8C,SAAS,KAKjB,KAAIC,EAA2B/C,EAAMgD,MAAM,EAAEhD,EAAMiD,QAAQ,MAAMC,cAnE9DA,cACAC,QAAQ,WAAW,IACnBA,QAAQ,MAAM,KAkEbC,EAAYpD,EAAMgD,MAAMhD,EAAMiD,QAAQ,KAAO,EAAGjD,EAAMiD,QAAQ,MAAMC,cACpEG,EAAWrD,EAAMgD,MAAMhD,EAAMiD,QAAQ,KAAK,EAAGjD,EAAMiD,QAAQ,MAAMC,mBANrE,IAAIE,EAAYpD,EAAMgD,MAAM,EAAGhD,EAAMiD,QAAQ,MAAMC,cAC/CG,EAAWrD,EAAMgD,MAAMhD,EAAMiD,QAAQ,KAAK,EAAGjD,EAAMiD,QAAQ,MAAMC,cAnE3E,IA4EQ1I,EACAmI,EAHJS,EAAYA,EAAUD,QAAQ,aAAc,IAI5B,WAHhBE,EAAWA,EAASF,QAAQ,MAAO,MAGI,aAAZE,GAAsC,WAAZA,GAAqC,iBAAbA,GAC3ExB,EAAQwB,GAEPD,GACDE,YAAW,YACT9I,EAAQ+I,SAASC,eAAeJ,MAE9B5I,EAAMiJ,cAAc,IAAIC,MAAM,UAC9BJ,YAAW,WACT7I,QAAQC,IAAI,0BACZD,QAAQC,IAAI6I,SAASC,eAAe,oBACpCD,SAASC,eAAe,mBAAmBC,cAAc,IAAIC,MAAM,YAClE,QAEJ,KAEF1D,EAAM8C,SAAS,MAAQC,GACxBO,YAAW,YACTX,EAASY,SAASC,eAAeT,MAE/BJ,EAAOc,cAAc,IAAIC,MAAM,UAC/BJ,YAAW,WACTC,SAASC,eAAe,mBAAmBC,cAAc,IAAIC,MAAM,YAClE,QAEJ,MASDzD,EAAW,uCAAG,WAAOD,GAAP,eAAAtG,EAAA,sDACZiK,EAAWzB,EAAiB0B,QAAO,SAAApJ,GACvC,OAAOA,EAAM0I,cAAcW,WAAW7D,EAAMkD,kBAC3CY,OAAO/B,EAAkB6B,QAAO,SAAAjB,GACjC,OAAOA,EAAOO,cAAcJ,SAAS9C,EAAMkD,mBAE7CpB,EAAS9B,GACTqC,EAAasB,GAPK,2CAAH,sDAYjB,OAFAjH,qBAAW,WAAO4F,MAAa,IAG7B,oCACE,kBAAC,EAAD,CACCtC,MAAOA,EACPE,SAAUD,EACVG,OA5FgB,SAASW,GAC5BtG,QAAQC,IAAIqG,GACZ8B,EAAU9B,GACVwC,SAASC,eAAe,uBAAuBO,UAAUC,IAAI,oBA0F1D1D,WAnFiB,SAASS,GAC7BwC,SAASC,eAAe,uBAAuBO,UAAUE,OAAO,mBACnD,UAAVlD,EAAEJ,KACHI,EAAEC,OAAOkD,UAkFT,kBAAC,EAAD,CAAYhD,WAAYkB,M,SCpJjB+B,G,OAAe,SAACrK,EAAM8G,GAIjC,IAHA,IAAMwD,EAAW,GACT1B,EAAa5I,EAAKU,MAAlBkI,SAEC2B,EAAI,EAAGA,EAAI3B,EAASpG,OAAQ+H,IACnCD,EAASxB,KAAKF,EAAS2B,GAAGlK,MAAM,GAAGyG,IAGrC,IAAM0D,EAAMC,KAAKD,IAAIE,MAAMD,KAAMH,GAE3BK,EAAMF,KAAKE,IAAID,MAAMD,KAAMH,GAE3BM,GADOD,EAAMH,GACK,EACxB,MAAO,CAACA,EAAKA,EAAMI,EAAUJ,EAAiB,EAAXI,EAAcJ,EAAiB,EAAXI,EAAcD,KAG1DE,EAAc,SAAC7K,EAAM8G,GAIhC,IAHA,IAAMwD,EAAW,GACTQ,EAAW9K,EAAX8K,OAECP,EAAI,EAAGA,EAAIO,EAAOtI,OAAQ+H,IACV,yBAAnBO,EAAOP,GAAGQ,MACZT,EAASxB,KAAKgC,EAAOP,GAAGlK,MAAM,GAAGyG,IAGrC,IAAM0D,EAAMC,KAAKD,IAAIE,MAAMD,KAAMH,GAE3BK,EAAMF,KAAKE,IAAID,MAAMD,KAAMH,GAE3BM,GADOD,EAAMH,GACK,EACxB,MAAO,CAACA,EAAKA,EAAMI,EAAUJ,EAAiB,EAAXI,EAAcJ,EAAiB,EAAXI,EAAcD,I,0FCPxDK,GAhBO,SAAC,GAAD,IAAG1D,EAAH,EAAGA,UAAW2D,EAAd,EAAcA,UAAWnE,EAAzB,EAAyBA,MAAzB,EAAgCoE,WAAhC,EAA4CC,aAA5C,OACpB,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,UAAWC,IAAOnE,UAAWoE,KAAGC,KAAOC,KAAMtE,IACrE,kBAACuE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAC3Cf,GAEH,kBAACa,EAAA,EAAD,CAAYG,QAAQ,KAAKT,UAAU,KAAKQ,cAAY,EAAClG,MAAO,CAACoG,aAAa,QACxE,kBAAC,KAAD,CAASC,MAAO,EAAGC,IAAKtF,EAAOuF,SAAU,KAAMC,UAAU,UC4sBlDC,I,OApsBA,SAAC,GAAkB,IAAjB5M,EAAgB,EAAhBA,KAAM4B,EAAU,EAAVA,KAAU,EACSI,mBAAS,GADlB,mBACtB6K,EADsB,KACTC,EADS,KAGvBC,EAAY,SAACnF,GACfkF,EAAelF,IAJU,EAMD5F,oBAAS,GANR,mBAMtBgL,EANsB,KAMdC,EANc,SA4DzBC,EA5DyB,EAUHlL,mBAAS,OAVN,mBAUtBH,EAVsB,KAUfsL,EAVe,OAWOnL,mBAAS,MAXhB,mBAWtBoL,EAXsB,KAWVC,EAXU,KAYvBC,EAAQC,iBAAO,MAZQ,EAaGvL,mBAAS,MAbZ,mBAatBwL,EAbsB,KAaXC,EAbW,OAcTzL,mBAAS,MAdA,mBActB0L,EAdsB,KAclBC,EAdkB,OAeH3L,oBAAS,GAfN,mBAef4L,GAfe,aAgBH5L,mBAAS,MAhBN,mBAgBtB6L,EAhBsB,KAgBfC,GAhBe,QAiBD9L,oBAAS,GAjBR,qBAiBtB+L,GAjBsB,MAiBdC,GAjBc,SAkBFhM,mBAAS,MAlBP,qBAkBtBiM,GAlBsB,MAkBfC,GAlBe,SAmBFlM,mBAAS,MAnBP,qBAmBtBmM,GAnBsB,MAmBfC,GAnBe,SAoBJpM,mBAAS,MApBL,qBAoBtBqM,GApBsB,MAoBhBC,GApBgB,SAqBNtM,mBAAS,MArBH,qBAqBtBuM,GArBsB,MAqBjBC,GArBiB,SAsBNxM,mBAAS,MAtBH,qBAsBtByM,GAtBsB,MAsBjBC,GAtBiB,SAuBJ1M,mBAAS,MAvBL,qBAuBvBjB,GAvBuB,MAuBhB4N,GAvBgB,SAwBE3M,mBAAS,MAxBX,qBAwBtBb,GAxBsB,MAwBXyN,GAxBW,SAyBL5M,mBAAS,MAzBJ,qBAyBvBoK,GAzBuB,MAyBjByC,GAzBiB,SA0BH7M,mBAAS,MA1BN,qBA0BvB8M,GA1BuB,MA0BhBC,GA1BgB,MA4BzBC,QAAmBC,EACnBC,QAAoBD,EACpBE,QAAkBF,EAClBG,QAAcH,EACdI,GAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,WACrDC,GAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WACtDC,GAAO,CAAC,UAAW,UAAW,UAAW,UAAW,WACpDC,GAAU,CAAC,UAAW,UAAW,UAAW,UAAW,WACvDC,GAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,WAErDC,GAAmBC,MAClBb,OAAO,CAAC,MAAO,MAAO,OAAQ,KAAQ,SACtCc,MAAM,CAAC,UAAW,UAAW,UAAW,UAAW,YAEpDC,GAAuBF,MACtBb,OAAO,CAAC,IAAK,IAAK,KAAM,KAAM,OAC9Bc,MAAM,CAAC,UAAW,UAAW,UAAW,UAAW,YAEpDE,GAAoBH,MACnBb,OAAO,CAAC,IAAK,IAAK,KAAM,KAAM,OAC9Bc,MAAM,CAAC,UAAW,UAAW,UAAW,UAAW,YAEpDG,GAAiBJ,MAChBb,OAAO,CAAC,IAAK,IAAK,KAAM,KAAM,OAC9Bc,MAAM,CAAC,UAAW,UAAW,UAAW,UAAW,YAEpDI,GAAkBL,MACjBb,OAAO,CAAC,IAAK,IAAK,KAAM,KAAM,OAC9Bc,MAAM,CAAC,UAAW,UAAW,UAAW,UAAW,YACpD1G,GAASqE,iBAAO,MAChBtE,GAAWsE,iBAAO,MAClBpC,GAASoC,iBAAO,MAEhB0C,GAAa,KAGX7J,IAFMmH,iBAAO,GAGV,IADHnH,GAEM,GAFNA,GAGI,GAHJA,GAIK,GAEP8J,GAASP,IAAU,MAogBvB,OA3fA1M,qBAAU,WACN,IACIpD,EAAOM,IAAMC,IAAI,kFACrB+P,QACKC,IAAI,CAACvQ,IACLwQ,MAAK,SAACC,GACH3C,GAAM,SAAAD,GAAE,OAAI4C,EAAI,GAAGjQ,WAE3BuN,GAAS,SAAA2C,GAAK,OAAI,OAEnB,IACHtN,qBAAU,WACN,GAAGjD,EAAK,CAEJ,IAAIwQ,EACAC,EAHA,4CAIJ,sBAAAxQ,EAAA,sEAEkBF,EAAcC,GAFhC,cAEIwQ,EAFJ,gBAGkB3P,EAAqBb,GAHvC,OAGIyQ,EAHJ,OAIIhD,EAAWgD,GACX3C,IAAS,SAAAD,GAAK,OAAI2C,KAClBtC,IAAU,SAAAD,GAAM,OAAIuC,EAAM9P,MAAM,GAAGyD,SACnCiK,IAAU,SAAAD,GAAM,OAAIqC,EAAM9P,MAAM,GAAGuE,UACnCqJ,IAAS,SAAAD,GAAK,OAAImC,EAAM9P,MAAM,GAAG2E,YACjCqJ,IAAQ,SAAAD,GAAI,OAAI+B,EAAM9P,MAAM,GAAGsF,gBAC/BwI,IAAQ,SAAAD,GAAI,OAAIiC,EAAM9P,MAAM,GAAGiF,cAVnC,6CAJI,sBACJ3E,QAAQC,IAAIjB,GADR,mCAgBJ0Q,MAEN,CAAC1Q,IAEHiD,qBAAU,WACN,IAAM0N,EAAMhB,IAAUrC,EAAMsD,SAC5B,GAAIlD,GAAMJ,EAAMsD,SAAW5Q,GAAQwN,GAAa5L,EAAM,CAClDoM,IAAU,GACVf,GAAU,GACV,IAAK,IAAIrC,EAAI,EAAGA,EAAI,IAAKA,IACrB+F,EAAIE,OAAO,KAAKrG,SAGpB,IAAI1I,EAAQ,IAAMsE,GAAcA,GAC5BrE,EAAS,IAAMqE,GAAcA,GACjCuK,EAAIG,OAAO,OACNC,KAAK,QAAS,oBACdA,KAAK,SAAUhP,EAASqE,GAAaA,IACrC2K,KAAK,QAASjP,EAAQsE,GAAcA,IAGzCuK,EAAIG,OAAO,QACNC,KAAK,QAAS,+BACdA,KAAK,SAAUhP,EAASqE,GAAaA,IACrC2K,KAAK,QAASjP,EAAQsE,GAAcA,IACpC4K,GAAG,QAASC,GAEjB,IAAMC,EAAavB,MACdwB,UAAU,CAACrP,EAAQ,EAAGC,EAAS,IAC/BqP,MAAMtP,GAELuP,EAAO1B,MACRuB,WAAWA,GACVI,EAAIX,EAAIG,OAAO,KAChBC,KAAK,QAAS,0CACdA,KAAK,YAAa,aAAe3K,GAAc,IAAMA,GAAa,KAClE2K,KAAK,QAASjP,EAAQsE,GAAcA,IACpC2K,KAAK,SAAUhP,EAASqE,GAAaA,IAC1C6C,GAAWsI,IAAiB7D,EAAIA,EAAG8D,QAAQvI,UAAUwI,UACrDtG,GAASoG,IAAiB7D,EAAIA,EAAG8D,QAAQrG,QAAQsG,UAC1CC,SAAQ,SAAUC,GACrBA,EAAEC,MAAQpE,EAAUrC,OAAO0G,MAAK,SAAUC,GACtC,OAAgB,IAATA,EAAEC,KAAc,MAASJ,EAAEjK,SAI1C4J,EAAER,OAAO,KACJkB,UAAU,QACV3R,KAAK4I,IACLgJ,QAAQnB,OAAO,QACfC,KAAK,IAAKM,GACVN,KAAK,QAAS,mBACdA,KAAK,MAAM,SAAUe,GAClB,OAAIA,EAAEF,MACmBE,EAAEF,MAAMxG,KAAK3B,cAvF7CA,cACAC,QAAQ,WAAW,IACnBA,QAAQ,MAAM,KAsFO,MAEjBsH,GAAG,SAAS,SAASc,GAElB3E,EAAS2E,EAAEF,MAAMxG,MACjBwD,GAAUkD,EAAEF,MAAMxG,MAClB8C,IAAU,SAAAD,GAAM,OAAI6D,EAAEF,MAAMlR,MAAM,GAAGyD,SACrCiK,IAAU,SAAAD,GAAM,OAAI2D,EAAEF,MAAMlR,MAAM,GAAGuE,UACrCqJ,IAAS,SAAAD,GAAK,OAAIyD,EAAEF,MAAMlR,MAAM,GAAG2E,YACnCqJ,IAAQ,SAAAD,GAAI,OAAIqD,EAAEF,MAAMlR,MAAM,GAAGsF,gBACjCwI,IAAQ,SAAAD,GAAI,OAAIuD,EAAEF,MAAMlR,MAAM,GAAGiF,iBAEpCqL,GAAG,aAAakB,GAChBlB,GAAG,aAAa,SAAUc,GACvBK,EAAUC,KAAKN,EAAGO,SAErBrB,GAAG,YAAY,SAAUc,GACtBK,EAAUG,KAAKR,EAAGO,SAEb,UAATzQ,GACAwN,GAAclE,EAAYsC,EAAW,gBACrCqB,GAAS,CACL0D,OAAQlD,GAAM,GACdmD,OAAQnD,GAAM,GACdoD,OAAQpD,GAAM,GACdqD,OAAQrD,GAAM,GACdsD,OAAQtD,GAAM,KAElBY,GAAaN,MACRb,OAAOM,IACPQ,MAAMP,KACK,aAATzN,GACPwN,GAAclE,EAAYsC,EAAW,mBACrCqB,GAAS,CACL0D,OAAQjD,GAAO,GACfkD,OAAQlD,GAAO,GACfmD,OAAQnD,GAAO,GACfoD,OAAQpD,GAAO,GACfqD,OAAQrD,GAAO,KAEnBW,GAAaN,MACRb,OAAOM,IACPQ,MAAMN,KACK,WAAT1N,GACPwN,GAAclE,EAAYsC,EAAW,iBACrCqB,GAAS,CACL0D,OAAQhD,GAAK,GACbiD,OAAQjD,GAAK,GACbkD,OAAQlD,GAAK,GACbmD,OAAQnD,GAAK,GACboD,OAAQpD,GAAK,KAEjBvO,QAAQC,IAAImO,IACZpO,QAAQC,IAAIsO,IACZU,GAAaN,MACRb,OAAOM,IACPQ,MAAML,KACK,qBAAT3N,GACPwN,GAAclE,EAAYsC,EAAW,uBACrCqB,GAAS,CACL0D,OAAQ/C,GAAQ,GAChBgD,OAAQhD,GAAQ,GAChBiD,OAAQjD,GAAQ,GAChBkD,OAAQlD,GAAQ,GAChBmD,OAAQnD,GAAQ,KAEpBxO,QAAQC,IAAImO,IACZa,GAAaN,MACRb,OAAOM,IACPQ,MAAMJ,KACK,iBAAT5N,IACPwN,GAAclE,EAAYsC,EAAW,qBACrCqB,GAAS,CACL0D,OAAQ9C,GAAM,GACd+C,OAAQ/C,GAAM,GACdgD,OAAQhD,GAAM,GACdiD,OAAQjD,GAAM,GACdkD,OAAQlD,GAAM,KAElBzO,QAAQC,IAAImO,IACZpO,QAAQC,IAAIwO,IACZQ,GAAaN,MACRb,OAAOM,IACPQ,MAAMH,KAEfV,GAAU,CACN6D,QAASxD,GAAY,GAAGyD,QAAQ,GAAK,IACrCC,QAAS1D,GAAY,GAAGyD,QAAQ,GAAK,IACrCE,QAAS3D,GAAY,GAAGyD,QAAQ,GAAK,IACrCG,QAAS5D,GAAY,GAAGyD,QAAQ,GAAK,IACrCI,QAAS7D,GAAY,GAAGyD,QAAQ,GAAK,MAEzCvB,EAAER,OAAO,KACJC,KAAK,KAAM,UACXiB,UAAU,QACV3R,KAAK8K,IACL8G,QAAQnB,OAAO,QACf3K,MAAM,QAAQ,SAAU2L,GACrB,OAAIA,EAAEF,OAAkB,UAAThQ,EACJqO,GAAW6B,EAAEF,MAAMlR,MAAM,GAAGwS,cAC5BpB,EAAEF,OAAkB,aAAThQ,EACXqO,GAAW6B,EAAEF,MAAMlR,MAAM,GAAGyS,iBAC5BrB,EAAEF,OAAkB,WAAThQ,EACXqO,GAAW6B,EAAEF,MAAMlR,MAAM,GAAG0S,eAC5BtB,EAAEF,OAAkB,iBAAThQ,EACXqO,GAAW6B,EAAEF,MAAMlR,MAAM,GAAG2S,mBAC5BvB,EAAEF,OAAkB,qBAAThQ,EACXqO,GAAW6B,EAAEF,MAAMlR,MAAM,GAAG4S,qBAE5B,WAGdvC,KAAK,IAAKM,GACVN,KAAK,MAAM,SAAUe,GAClB,OAAIA,EAAEF,MACKE,EAAEF,MAAMxG,KAAK3B,cACV,MAEjBsH,KAAK,QAAS,SACdC,GAAG,QAASC,GACZD,GAAG,aAAa,SAAUc,GACvByB,EAASnB,KAAKN,EAAGO,SAEpBrB,GAAG,YAAY,SAAUc,GACtByB,EAASjB,KAAKR,EAAGO,SAEzBf,EAAER,OAAO,QACJ0C,MAAMjC,IAAc7D,EAAIA,EAAG8D,QAAQrG,QAAQ,SAAUlL,EAAGwT,GACrD,OAAOxT,IAAMwT,MAEhB1C,KAAK,KAAM,iBACXA,KAAK,IAAKM,GAGf,IAAMkC,EAAWG,cACZ3C,KAAK,QAAS,UACd4C,OAAO,CAAC,IAAK,MACbC,MAAK,SAAU9B,GACZ,MAAa,UAATlQ,GAAoBkQ,EAAEF,MACf,4GACSE,EAAEF,MAAMxG,KAAO,eACf0G,EAAEF,MAAMlR,MAAM,GAAGyD,MAAQ,0BACd2N,EAAEF,MAAMlR,MAAM,GAAGwS,aAAaL,QAAQ,GAAK,eAEtD,aAATjR,GAAuBkQ,EAAEF,MACzB,4GACSE,EAAEF,MAAMxG,KAAO,mBACX0G,EAAEF,MAAMlR,MAAM,GAAG2E,SAAW,0BACrByM,EAAEF,MAAMlR,MAAM,GAAGyS,gBAAgBN,QAAQ,GAAK,eAEzD,WAATjR,GAAqBkQ,EAAEF,MACvB,4GACSE,EAAEF,MAAMxG,KAAO,gBACd0G,EAAEF,MAAMlR,MAAM,GAAGuE,OAAS,0BAChB6M,EAAEF,MAAMlR,MAAM,GAAG0S,cAAcP,QAAQ,GAAK,eAEvD,iBAATjR,GAA2BkQ,EAAEF,MAC7B,4GACSE,EAAEF,MAAMxG,KAAO,4BACF0G,EAAEF,MAAMlR,MAAM,GAAGkF,gBAAkB,qCAC1BkM,EAAEF,MAAMlR,MAAM,GAAG2S,kBAAkBR,QAAQ,GAAK,eAEtE,qBAATjR,GAA+BkQ,EAAEF,MACjC,4GACSE,EAAEF,MAAMxG,KAAO,sBACR0G,EAAEF,MAAMlR,MAAM,GAAGsF,aAAe,0BAC5B8L,EAAEF,MAAMlR,MAAM,GAAG4S,oBAAoBT,QAAQ,GAAK,eAGtE,4GACSf,EAAEpK,GAAK,8BAKnC4J,EAAEuC,KAAKN,GACP,IAAMpB,EAAYuB,cACb3C,KAAK,QAAS,UACd4C,OAAO,CAAC,IAAK,MACbC,MAAK,SAAU9B,GACZ,MAAa,UAATlQ,GAAoBkQ,EAAEF,OACtB/C,GAAS,CACL0D,OAAQlD,GAAM,GACdmD,OAAQnD,GAAM,GACdoD,OAAQpD,GAAM,GACdqD,OAAQrD,GAAM,GACdsD,OAAQtD,GAAM,KAElBN,GAAU,CACN6D,QAAS5D,GAAiB,GAAG6D,QAAQ,GAAK,IAC1CC,QAAS9D,GAAiB,GAAG6D,QAAQ,GAAK,IAC1CE,QAAS/D,GAAiB,GAAG6D,QAAQ,GAAK,IAC1CG,QAAShE,GAAiB,GAAG6D,QAAQ,GAAK,IAC1CI,QAASjE,GAAiB,GAAG6D,QAAQ,GAAK,MAE9CvB,EAAEU,UAAU,QACP7L,MAAM,QAAQ,SAAU2L,GACrB,GAAIA,EAAEF,OAASpP,SAASsP,EAAEpK,GAAK,OAAUwF,EACrC,OAAOwC,GAAiBoC,EAAEF,MAAMlR,MAAM,GAAGwS,iBAG9C,6GACUpB,EAAEF,MAAMxG,KAAO,eAChB0G,EAAEF,MAAMlR,MAAM,GAAGyD,MAAQ,2BACb2N,EAAEF,MAAMlR,MAAM,GAAGwS,aAAaL,QAAQ,GAAK,gBAEvD,aAATjR,GAAuBkQ,EAAEF,OAChC/C,GAAS,CACL0D,OAAQjD,GAAO,GACfkD,OAAQlD,GAAO,GACfmD,OAAQnD,GAAO,GACfoD,OAAQpD,GAAO,GACfqD,OAAQrD,GAAO,KAEnBP,GAAU,CACN6D,QAASzD,GAAgB,GAAG0D,QAAQ,GAAK,IACzCC,QAAS3D,GAAgB,GAAG0D,QAAQ,GAAK,IACzCE,QAAS5D,GAAgB,GAAG0D,QAAQ,GAAK,IACzCG,QAAS7D,GAAgB,GAAG0D,QAAQ,GAAK,IACzCI,QAAS9D,GAAgB,GAAG0D,QAAQ,GAAK,MAE7CvB,EAAEU,UAAU,QACP7L,MAAM,QAAQ,SAAU2L,GACrB,GAAIA,EAAEF,OAASpP,SAASsP,EAAEpK,GAAK,OAAUwF,EACrC,OAAO2C,GAAqBiC,EAAEF,MAAMlR,MAAM,GAAGyS,oBAGlD,6GACUrB,EAAEF,MAAMxG,KAAO,mBACZ0G,EAAEF,MAAMlR,MAAM,GAAG2E,SAAW,2BACpByM,EAAEF,MAAMlR,MAAM,GAAGyS,gBAAgBN,QAAQ,GAAK,gBAE1D,WAATjR,GAAqBkQ,EAAEF,OAC9B/C,GAAS,CACL0D,OAAQhD,GAAK,GACbiD,OAAQjD,GAAK,GACbkD,OAAQlD,GAAK,GACbmD,OAAQnD,GAAK,GACboD,OAAQpD,GAAK,KAEjBR,GAAU,CACN6D,QAAS1D,GAAkB,GAAG2D,QAAQ,GAAK,IAC3CC,QAAS5D,GAAkB,GAAG2D,QAAQ,GAAK,IAC3CE,QAAS7D,GAAkB,GAAG2D,QAAQ,GAAK,IAC3CG,QAAS9D,GAAkB,GAAG2D,QAAQ,GAAK,IAC3CI,QAAS/D,GAAkB,GAAG2D,QAAQ,GAAK,MAE/CvB,EAAEU,UAAU,QACP7L,MAAM,QAAQ,SAAU2L,GACrB,GAAIA,EAAEF,OAASpP,SAASsP,EAAEpK,GAAK,OAAUwF,EACrC,OAAO4C,GAAkBgC,EAAEF,MAAMlR,MAAM,GAAG0S,kBAG/C,6GACUtB,EAAEF,MAAMxG,KAAO,eAChB0G,EAAEF,MAAMlR,MAAM,GAAGuE,OAAS,2BACd6M,EAAEF,MAAMlR,MAAM,GAAG0S,cAAcP,QAAQ,GAAK,gBAExD,iBAATjR,GAA2BkQ,EAAEF,OACpC7C,GAAU,MACVF,GAAS,MACTyC,EAAEU,UAAU,QACP7L,MAAM,QAAQ,SAAU2L,GACrB,GAAIA,EAAEF,OAASpP,SAASsP,EAAEpK,GAAK,OAAUwF,EACrC,OAAO6C,GAAe+B,EAAEF,MAAMlR,MAAM,GAAGoT,qBAG5C,6GACUhC,EAAEF,MAAMxG,KAAO,yCAGhB,qBAATxJ,GAA+BkQ,EAAEF,OACxC7C,GAAU,MACVF,GAAS,MACTyC,EAAEU,UAAU,QACP7L,MAAM,QAAQ,SAAU2L,GACrB,GAAIA,EAAEF,OAASpP,SAASsP,EAAEpK,GAAK,OAAUwF,EACrC,OAAO8C,GAAgB8B,EAAEF,MAAMlR,MAAM,GAAGsF,iBAG7C,6GACU8L,EAAEF,MAAMxG,KAAO,6CAIzB,6GACU0G,EAAEpK,GAAK,8BAOpC,SAASuJ,EAAQa,GAEb,GADA9D,IAAU,SAAAD,GAAM,OAAI,KACH,qBAAN+D,EAAmB,6CAW1B,sBAAA7R,EAAA,sEACmBa,EAAkBgR,EAAEF,MAAMxG,KAAMpL,GADnD,OACIkJ,GADJ,OAEID,GAASyI,SAAQ,SAAUC,GAEvBzE,EAAW1K,SAASsP,EAAEpK,IAClBlF,SAASmP,EAAEjK,GAAK,OAAiB,IAAPoK,EAAEpK,GAAY,MAExCiK,EAAEC,MAAQ1I,GAAOnI,MAAMkI,SAAS4I,MAAK,SAAUvK,GAE3C,OAAgB,IAATA,EAAEyK,KAAc,MAASJ,EAAEjK,UAI9CsH,GAAmBtE,EAAaxB,GAAQ,gBACxCwG,GAAmBC,MACdb,OAAOE,IACPY,MAAMP,IACXH,GAAoBxE,EAAaxB,GAAQ,iBACzC4G,GAAoBH,MACfb,OAAOI,IACPU,MAAML,IACXJ,GAAkBzE,EAAaxB,GAAQ,mBACvC2G,GAAuBF,MAClBb,OAAOK,IACPS,MAAMN,IAxBf,6CAX0B,sBA2C1B,GA1CApB,IAAU,SAAAD,GAAM,OAAI6D,EAAEF,MAAMlR,MAAM,GAAGyD,SACrCiK,IAAU,SAAAD,GAAM,OAAI2D,EAAEF,MAAMlR,MAAM,GAAGuE,UACrCqJ,IAAS,SAAAD,GAAK,OAAIyD,EAAEF,MAAMlR,MAAM,GAAG2E,YACnCqJ,IAAQ,SAAAD,GAAI,OAAIqD,EAAEF,MAAMlR,MAAM,GAAGsF,gBACjCwI,IAAQ,SAAAD,GAAI,OAAIuD,EAAEF,MAAMlR,MAAM,GAAGiF,cACjCwH,GAAS,SAAAtL,GAAK,OAAIiQ,EAAEF,MAAMxG,QAC1BiC,GAAc,SAAAD,GAAU,OAAG0E,EAAEF,MAAMxG,QAEnCuD,IAAS,SAAA5N,GAAK,OAAI+Q,EAAEF,MAAMxG,QATA,mCAsC1BsF,GAKIf,IAAU,eAAeoE,SAAW1B,KAAM,OAAOH,IAErD,GAAIhC,GAAO6D,SAAW1B,KAAM,OAAOH,IAEnChC,GAAO8D,QAAQ,UAAU,GACzB9D,GAASP,IAAU0C,MAAM2B,QAAQ,UAAU,GAE3C,IAAIC,EAAS5C,EAAK4C,OAAOnC,GACrBoC,EAAKD,EAAO,GAAG,GAAKA,EAAO,GAAG,GAC9BE,EAAKF,EAAO,GAAG,GAAKA,EAAO,GAAG,GAC9BG,GAAKH,EAAO,GAAG,GAAKA,EAAO,GAAG,IAAM,EACpCI,GAAKJ,EAAO,GAAG,GAAKA,EAAO,GAAG,IAAM,EACpC7C,EAAQ,GAAKtG,KAAKE,IAAIkJ,EAAKpS,EAAOqS,EAAKpS,GACvCoP,EAAY,CAACrP,EAAQ,EAAIsP,EAAQgD,EAAGrS,EAAS,EAAIqP,EAAQiD,GAE7D/C,EAAEgD,aACG5H,SAAS,KACTvG,MAAM,eAAgB,IAAMiL,EAAQ,MACpCL,KAAK,YAAa,aAAeI,EAAY,UAAYC,EAAQ,MAI9E,SAASc,IAAQ,4CACb,sBAAAjS,EAAA,sDACI2O,GAAU,MACVV,IAAU,SAAAD,GAAM,OAAIJ,EAAMnN,MAAM,GAAGyD,SACnCiK,IAAU,SAAAD,GAAM,OAAIN,EAAMnN,MAAM,GAAGuE,UACnCqJ,IAAS,SAAAD,GAAK,OAAIR,EAAMnN,MAAM,GAAG2E,YACjCqJ,IAAQ,SAAAD,GAAI,OAAIZ,EAAMnN,MAAM,GAAGsF,gBAC/BwI,IAAQ,SAAAD,GAAI,OAAIV,EAAMnN,MAAM,GAAGiF,cAC/BwH,GAAS,SAAAtL,GAAK,MAAI,SAClB8M,IAAS,SAAA5N,GAAK,MAAI,SAClBiN,IAAU,SAAAD,GAAM,OAAI,KACpBd,GAAU,SAAAD,GAAM,OAAI,KACpBK,GAAc,SAAAD,GAAU,OAAE,QACb,UAATxL,IACAwN,GAAclE,EAAYsC,EAAW,iBAC5B,aAAT5L,IACAwN,GAAclE,EAAYsC,EAAW,oBAC5B,WAAT5L,IACAwN,GAAclE,EAAYsC,EAAW,kBAC5B,iBAAT5L,IACAwN,GAAclE,EAAYsC,EAAW,sBAC5B,qBAAT5L,IACAwN,GAAclE,EAAYsC,EAAW,wBACzCuB,GAAU,CACN6D,QAASxD,GAAY,GAAGyD,QAAQ,GAAK,IACrCC,QAAS1D,GAAY,GAAGyD,QAAQ,GAAK,IACrCE,QAAS3D,GAAY,GAAGyD,QAAQ,GAAK,IACrCG,QAAS5D,GAAY,GAAGyD,QAAQ,GAAK,IACrCI,QAAS7D,GAAY,GAAGyD,QAAQ,GAAK,MA3B7C,6CADa,uBAAC,WAAD,wBAgCbnC,GACAR,GAAO8D,QAAQ,UAAU,GACzB9D,GAASP,IAAU,MAEnB2B,EAAEgD,aACGC,MAAM,KACN7H,SAAS,KACTvG,MAAM,eAAgB,SACtB4K,KAAK,YAAa,aAAe3K,GAAc,IAAMA,GAAa,KACvEkL,EAAEU,UAAU,QACP7L,MAAM,QAAQ,SAAU2L,GACrB,OAAIA,EAAEF,OAAkB,UAAThQ,EAEJqO,GAAW6B,EAAEF,MAAMlR,MAAM,GAAGwS,cAC5BpB,EAAEF,OAAkB,aAAThQ,EACXqO,GAAW6B,EAAEF,MAAMlR,MAAM,GAAGyS,iBAC5BrB,EAAEF,OAAkB,WAAThQ,EACXqO,GAAW6B,EAAEF,MAAMlR,MAAM,GAAG0S,eAC5BtB,EAAEF,OAAkB,iBAAThQ,EACXqO,GAAW6B,EAAEF,MAAMlR,MAAM,GAAG2S,mBAC5BvB,EAAEF,OAAkB,qBAAThQ,EACXqO,GAAW6B,EAAEF,MAAMlR,MAAM,GAAG4S,0BADhC,KAzHnBhC,EAAEuC,KAAK1B,GA8HPqC,OAAOC,cAAgB,WAEnB,OADAvC,KACO,GAGfvC,IAAU,OAAOkB,OAAO,KAAK6D,OAAOlK,WACrC,CAACkD,EAAIJ,EAAMsD,QAAShP,EAAM5B,EAAKwN,IAC7BA,EAMD,6BACI,kBAAC/B,EAAA,EAAD,CAAMkJ,WAAS,EAACC,QAAS,EAAGC,QAAQ,UAChC,kBAACC,GAAD,CACInN,UAAWoN,IAAWC,SACtB1J,UAAYzJ,EAAQ,SACpBsF,MAAO8G,GACPzC,aAAa,iCAIjB,kBAACsJ,GAAD,CACInN,UAAWoN,IAAWE,UACtB3J,UAAYzJ,EAAQ,aACpBsF,MAAOkH,KAEX,kBAACyG,GAAD,CACInN,UAAWoN,IAAW9P,OACtBqG,UAAYzJ,EAAQ,SACpBsF,MAAOgH,KAEJ,GAANI,GACG,kBAACuG,GAAD,CACInN,UAAWoN,IAAWG,WACtB5J,UAAYzJ,EAAQ,cACpBsF,MAAOoH,KACR,KACA,GAANE,GACG,kBAACqG,GAAD,CACInN,UAAWoN,IAAW/O,aACtBsF,UAAYzJ,EAAQ,gBACpBsF,MAAOsH,KAEV,MAET,6BACA,yBAAK9G,UAAWqE,IAAO2I,WACnB,kBAAClJ,EAAA,EAAD,CAAMkJ,WAAS,EAACC,QAAS,GACrB,kBAACnJ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAEVqB,EACG,kBAAC,EAAD,CAAOrL,OAAQ3B,EAAM6B,MAAOA,EAAOH,QAASX,GAAOI,WAAYA,GAAYS,KAAMA,EAAME,MAAO,OAAQC,OAAQ,SAAY,MAElI,kBAAC0J,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,yBAAKhE,UAAU,aACX,yBAAKA,UAAU,aACX,4BACIA,UAA2B,IAAhBkF,EAAoB,mBAAqB,OACpD9E,QAAS,kBAAMgF,EAAU,KAF7B,QAMEgB,GAKQ,KALC,4BACPpG,UAA2B,IAAhBkF,EAAoB,mBAAqB,OACpD9E,QAAS,kBAAMgF,EAAU,KAFlB,cAOf,yBAAKpF,UAAU,gBACX,yBAAKA,UAA2B,IAAhBkF,EAAoB,0BAA4B,WAC5D,kBAACpB,EAAA,EAAD,CAAMkJ,WAAS,EAACC,QAAS,GACrB,kBAACnJ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,yBAAKhE,UAAWqE,IAAOmJ,SAClBpH,GACG,4BAAQpG,UAAWqE,IAAOoJ,QAASrN,QAzoBnF,WACIkF,GAAU,SAAAD,GAAM,OAAc,GAAVA,OAwoBwB,iBAAoF,OAGhG,kBAACvB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACVS,IAAS0C,GACN,yBAAKnH,UAAWqE,IAAOvH,QACnB,yBAAKkD,UAAWqE,IAAOqJ,UACvB,yBAAK1N,UAAWqE,IAAOsJ,aAAvB,yBACI,yBAAK3N,UAAWqE,IAAOuJ,aACnB,wBAAI5N,UAAWqE,IAAOwJ,cAClB,4BAAI,0BAAMrP,MAAO,CAACY,WAAYqF,GAAMmG,UAAiBzD,GAAO8D,SAC5D,4BAAI,0BAAMzM,MAAO,CAACY,WAAYqF,GAAMoG,UAAiB1D,GAAOgE,SAC5D,4BAAI,0BAAM3M,MAAO,CAACY,WAAYqF,GAAMqG,UAAiB3D,GAAOiE,SAC5D,4BAAI,0BAAM5M,MAAO,CAACY,WAAYqF,GAAMsG,UAAiB5D,GAAOkE,SAC5D,4BAAI,0BAAM7M,MAAO,CAACY,WAAYqF,GAAMuG,UAAiB7D,GAAOmE,aAK1E,OAIV,yBACItL,UAAU,eACV7F,MAAO0S,OAAOiB,WAAW,IACzB1T,OAAQyS,OAAOkB,YAAY,IAC3BC,IAAKrI,KAKfS,GAOM,KAPG,yBACPpG,UAA2B,IAAhBkF,EAAoB,0BAA4B,WAEzDkB,GAGI,KADF,kBAAC,EAAD,CAAOpM,OAAQ3B,EAAM6B,MAAOA,EAAOH,QAASX,GAAOI,WAAYA,GAAYS,KAAMA,EAAME,MAAO,OAAQC,OAAQ,aAMlI,kBAAC0J,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACVqB,EAAS,kBAAC,GAAD,CAAOrL,OAAQ3B,EAAM6B,MAAOA,EAAOuL,WAAYA,IAAgB,SAhHrF,6C,wCCtcGwI,GA/IC,WAAO,IAAD,EACI5T,mBAAS,MADb,gCAEYA,mBAAS,OAFrB,gCAGcA,mBAAS6T,IAAQ,IAAIxU,MAAS,KAH5C,mBAGbd,EAHa,KAGFuV,EAHE,KAIdC,EAAQnG,IAAM,KAAMoG,aAAQ,IAAI3U,MAAU,EAAG,GAC7C4U,EAAS,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAjBkB,EAmBIjU,mBAAS,IAAIX,MAnBjB,mBAmBP6U,GAnBO,WAoBdC,EAAc,IAAI9U,KAAK+U,IAAO7V,GAAW8V,OAAO,eApBlC,EAqBIrU,mBAAS,MArBb,mBAqBbJ,EArBa,KAqBPwG,EArBO,KAsBdkO,EAAS,IAAIjV,KAAK,cAClBkV,EAAQ,IAAIlV,KAAK,cACnBmV,GAAY,EACZnV,KAAKoV,MAAMH,GAAUjV,KAAKoV,MAAMN,KAClCK,GAAY,GAEd,IAAME,EAAQ,IAAIrV,KAAK,cACnBsV,GAAW,EAUf,OATItV,KAAKoV,MAAMC,GAASrV,KAAKoV,MAAMN,KACjCQ,GAAW,GAEb1T,qBAAU,WAERiT,GAAQ,SAACU,GAAD,OAAUA,EAAKC,QAAQD,EAAKE,UAAY,MAChD1O,GAAQ,SAACxG,GAAD,MAAU,aACjB,IAGD,6BAEE,kBAAC6J,EAAA,EAAD,CAAMkJ,WAAS,EAACC,QAAS,GACvB,kBAACnJ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,yBAAKhE,UAAWqE,IAAO+K,QACrB,6BAAK,kBAAC,EAAD,CAAYnV,KAAMA,EAAMwG,QAASA,OAG1C,kBAACqD,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAIb,yBAAKhE,UAAWqE,IAAOgL,cAGrB,6BAEE,4BAAQrP,UAAS,UAAKqE,IAAOiL,QAAZ,YAAuBjL,IAAOkL,MAAQnP,QAAS,kBAAMK,EAAQ,WAA9E,UAGA,4BAAQT,UAAS,UAAKqE,IAAOiL,QAAZ,YAAuBjL,IAAOmL,OAASpP,QAAS,kBAAMK,EAAQ,cAA/E,cAGA,4BAAQT,UAAS,UAAKqE,IAAOiL,QAAZ,YAAuBjL,IAAOoL,KAAOrP,QAAS,kBAAMK,EAAQ,YAA7E,WAGCuO,EAAW,4BAAQhP,UAAS,UAAKqE,IAAOiL,QAAZ,YAAuBjL,IAAOqL,MAAQtP,QAAS,kBAAMK,EAAQ,kBAA9E,iBAAwH,gBAGnIoO,EACC,4BAAQ7O,UAAS,UAAKqE,IAAOiL,QAAZ,YAAuBjL,IAAOsL,QAAUvP,QAAS,kBAAMK,EAAQ,sBAAhF,qBAEE,uBAMV,kBAACqD,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,yBAAKhE,UAAWqE,IAAOhM,MACrB,4CAAiB,kBAAC,KAAD,CACfuX,mBAAoB,gBAClBvX,EADkB,EAClBA,KACAwX,EAFkB,EAElBA,WACAC,EAHkB,EAGlBA,YACAC,EAJkB,EAIlBA,cACAC,EALkB,EAKlBA,cACAC,EANkB,EAMlBA,wBACAC,EAPkB,EAOlBA,wBAPkB,OASlB,yBACE1R,MAAO,CACHC,OAAQ,GACR1B,QAAS,OACToT,eAAgB,WAGpB,4BAAQ/P,QAAS2P,EAAeK,SAAUH,GACrC,KAEL,4BACIzQ,MAAO6O,aAAQhW,GACfyG,SAAU,gBAAaU,EAAb,EAAGI,OAAUJ,MAAb,OAA2BqQ,EAAWrQ,KAE/C4O,EAAMtV,KAAI,SAACuX,GAAD,OACP,4BAAQ9Q,IAAK8Q,EAAQ7Q,MAAO6Q,GACvBA,OAKb,4BACI7Q,MAAO8O,EAAOgC,aAASjY,IACvByG,SAAU,gBAAaU,EAAb,EAAGI,OAAUJ,MAAb,OAA2BsQ,EAAYxB,EAAOzM,QAAQrC,MAE/D8O,EAAOxV,KAAI,SAACuX,GAAD,OACR,4BAAQ9Q,IAAK8Q,EAAQ7Q,MAAO6Q,GACvBA,OAKb,4BAAQjQ,QAAS4P,EAAeI,SAAUF,GACrC,OAITK,SAAU3X,EACVkG,SAAU,SAACzG,GAAD,OAAU8V,EAAa9V,IACjCmY,QAAStC,IAAQ,IAAIxU,MAAS,GAC9B+W,QAAS7B,QAOjB,6BAEA,kBAAC,GAAD,CAAOvW,KAAMoW,IAAO7V,GAAW8V,OAAO,cAAezU,KAAMA,EAAMyW,MAAQ,OAAOtW,OAAS,W,kBC/FhFuW,GAtDH,WACR,OACI,6BACI,kBAAC,KAAD,CAAMnS,MAAO,CAAEiG,MAAO,QAASmM,eAAgB,QAAUC,GAAG,KACxD,yBAAKrS,MAAO,CAAEsS,SAAU,SAAxB,kBAEJ,wBAAI9Q,UAAU,aACV,kBAAC,KAAD,CACIxB,MAAO,CACHiG,MAAO,QACPmM,eAAgB,OAChBG,UAAW,MACXC,YAAa,OACbF,SAAU,QAEdD,GAAG,UAEH,sCAEJ,kBAAC,KAAD,CACIrS,MAAO,CACHiG,MAAO,QACPmM,eAAgB,OAChBG,UAAW,MACXC,YAAa,OACbF,SAAU,QAEdD,GAAG,YAEH,wCAEJ,kBAAC,KAAD,CACIrS,MAAO,CACHiG,MAAO,QACPmM,eAAgB,OAChBG,UAAW,MACXC,YAAa,OACbF,SAAU,QAEdD,GAAG,YAEH,wCAEJ,kBAAC,KAAD,CACIrS,MAAO,CAAEiG,MAAO,QAASmM,eAAgB,OAAQG,UAAW,MAAMD,SAAU,QAC5ED,GAAG,UAEH,yCCnCLI,I,OAbE,SAAC,GACjB,IADmBhU,EACpB,EADoBA,MAAOiU,EAC3B,EAD2BA,YAAaC,EACxC,EADwCA,IAAKC,EAC7C,EAD6CA,WAEzC,OACI,yBAAKpR,UAAU,aACX,yBAAKA,UAAU,WAAWqR,IAAKD,EAAYE,IAAI,cAC/C,4BACI,uBAAGC,KAAMJ,GAAMlU,IAEnB,2BAAIiU,MCwBDM,GA9BF,SAAC,GAA+B,IAA9BxX,EAA6B,EAA7BA,OAAOE,EAAsB,EAAtBA,MAAsB,KAAhBuL,WACMpL,mBAAS,KADC,mBACnCoX,EADmC,KACzBC,EADyB,KAgB1C,OAbApW,qBAAU,YACS,uCAAG,4BAAAhD,EAAA,sEACAqZ,IAAMlZ,IAAN,+DAC0CyB,EAD1C,eACsDF,EADtD,sFADA,OACZ4X,EADY,OAKlBF,EAAYE,EAAIlZ,KAAK+Y,UACrBpY,QAAQC,IAAIsY,GANM,2CAAH,qDASjBC,KACC,CAAC7X,EAAOE,IAGP,6BACGuX,EAAS3Y,KAAI,gBAAGmE,EAAH,EAAGA,MAAOiU,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,WAA5B,OACV,kBAAC,GAAD,CACInU,MAAOA,EACPiU,YAAaA,EACbC,IAAKA,EACLC,WAAYA,S,qBCHbU,GApBD,SAAC,GAAD,IAAG9X,EAAH,EAAGA,OAAOE,EAAV,EAAUA,MAAV,EAAiBuL,WAAjB,OACV,yBAAKjH,MAAO,CAAEC,OAAQ,SACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,cAEF,kBAAC,IAAD,KACE,2BACE,yBAAKuB,UAAU,aAAaxB,MAAO,CAACpE,OAAQ,QAASD,MAAO,QAAS4X,SAAU,WAC7E,kBAAC,KAAD,CAAQC,cAAc,cACpB,4BACE,kBAAC,GAAD,CAAMhY,OAAQA,EAAQE,MAAOA,Y,SCNhC+X,GAPF,WACT,OACI,6BACI,kBAAC,GAAD,QCOGzE,GAVC,SAAC,GAAoC,IAAD,IAAjCpU,MAAS2G,EAAwB,EAAxBA,GAAwB,EAApB0D,KAAoB,EAAdgB,MAClC,OAAS,yBACDzE,UAAcqE,IAAO2I,WACzB,+BACMjN,EADN,O,6HCsEOmS,GAlED,kBACZ,yBACE1T,MAAO,CACL7B,gBAAiB,QACjBwV,UAAW,WAGb,6BACE,wCACA,6BACA,kBAACrO,EAAA,EAAD,CAAMkJ,WAAS,EAACC,QAAS,GACrB,kBAACnJ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,6BAEJ,kBAACF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,yBAAKqN,IAAKe,KAAO5T,MAAO,CAAEpE,OAAQ,IAAKD,MAAO,OAC9C,8CAEJ,kBAAC2J,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,yBAAKqN,IAAKgB,KAAM7T,MAAO,CAAEpE,OAAQ,IAAKD,MAAO,OAC7C,8CAEJ,kBAAC2J,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,yBAAKqN,IAAKiB,KAAM9T,MAAO,CAAEpE,OAAQ,IAAKD,MAAO,OAC7C,+CAEJ,kBAAC2J,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,yBAAKqN,IAAKkB,KAAO/T,MAAO,CAAEpE,OAAQ,IAAKD,MAAO,OAC9C,+CAEJ,kBAAC2J,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,yBAAKqN,IAAKmB,KAAKhU,MAAO,CAAEpE,OAAQ,IAAKD,MAAO,OAC5C,+CAGR,6BACA,6BACF,yBACEqE,MAAO,CACLc,QAAS,OACT3C,gBAAiB,OACjB8H,MAAO,QACPhG,OAAQ,OACRgU,aAAc,SAGhB,yDACA,yBAAKjU,MAAO,CAAEsS,SAAU,SAAxB,mjBAGA,6BACA,2DACA,yBAAKtS,MAAO,CAAEsS,SAAU,SACrB,IACD,uBACES,KAAK,gDACL3R,OAAO,UAFT,cAKK,KAEP,gC,wKCuJS8S,GA/MC,WACd,OACE,yBAAKlU,MAAO,CAAEC,OAAQ,SACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAK,6CACL,kBAAC,IAAD,KAAK,6CACL,kBAAC,IAAD,KAAK,+CACL,kBAAC,IAAD,KAAK,gDAGP,kBAAC,IAAD,KACE,2IAGA,wJAIA,6BACA,6BACA,6BACA,6CACA,4PAMA,oNAKA,6BACA,yBAAK4S,IAAKsB,KAAQnU,MAAO,CAAEpE,OAAQ,QAErC,kBAAC,IAAD,KACE,mLAKA,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,8BACA,kBAAC,IAAD,8BACA,kBAAC,IAAD,2BAEF,kBAAC,IAAD,KACE,4BACE,qCACA,yCACA,2CAGJ,kBAAC,IAAD,KACE,4BACE,+CACA,2CACA,yCACA,8CACA,wCACA,sDACA,sFAGJ,kBAAC,IAAD,KACE,4BACE,2EACA,sDACA,2DAEF,6BACA,yJAIA,6BACA,yBAAKiX,IAAKuB,KAAQpU,MAAO,CAAEpE,OAAQ,OACnC,wHAIA,yKAON,kBAAC,IAAD,KACE,4NAKA,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,mBACA,kBAAC,IAAD,wBACA,kBAAC,IAAD,sCACA,kBAAC,IAAD,mCACA,kBAAC,IAAD,kBACA,kBAAC,IAAD,mDAEF,kBAAC,IAAD,KACI,wGACA,6BACA,yBAAKiX,IAAKwB,KAAWrU,MAAO,CAAEpE,OAAQ,IAAKD,MAAO,QAEtD,kBAAC,IAAD,KACE,gGACA,6BACA,yBAAKkX,IAAKyB,KAAUtU,MAAO,CAAEpE,OAAQ,IAAKD,MAAO,QAEnD,kBAAC,IAAD,KACE,yEACA,6BACA,yBAAKkX,IAAK0B,KAAOvU,MAAO,CAAEpE,OAAQ,IAAKD,MAAO,QAEhD,kBAAC,IAAD,KACE,mHAEA,6BACA,yBAAKkX,IAAK2B,KAAOxU,MAAO,CAAEpE,OAAQ,IAAKD,MAAO,QAEhD,kBAAC,IAAD,KACE,0JAEA,6BACA,6BACA,kBAAC2J,EAAA,EAAD,CAAMkJ,WAAS,EAACC,QAAS,GACvB,kBAACnJ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,6BAEF,kBAACF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACf,2BAAG,yBAAKqN,IAAK4B,KAAUzU,MAAO,CAAEpE,OAAQ,IAAKD,MAAO,SAEpD,kBAAC2J,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,6BAEF,kBAACF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACf,2BAAG,yBAAKqN,IAAK6B,KAAM1U,MAAO,CAAEpE,OAAQ,IAAKD,MAAO,SAEhD,kBAAC2J,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,+BAIN,kBAAC,IAAD,KACE,yKAKA,6BACA,yBAAKqN,IAAK8B,KAAS3U,MAAO,CAAEpE,OAAQ,IAAKD,MAAO,UAItD,kBAAC,IAAD,KACE,2MAKA,6BACA,6BACA,6BACA,wCACA,8PAMA,2UAOA,kOAKA,iDACA,6KAKA,6HC9HKiZ,GAnFC,WACZ,OACI,6BACI,yBACI5U,MAAO,CACH7B,gBAAiB,QACjBwV,UAAW,WAGf,6DACA,6BACA,8BAER,yBACI3T,MAAO,CACH7B,gBAAiB,QACjBwV,UAAW,SAGf,6BACA,2BAAG,wFACC,kRAII,0ZAMA,sYACR,6BACA,2BAAG,wHACC,4eAEJ,gTACA,8MACA,6BACA,2BAAG,2GACC,+MACA,uZACJ,6BACA,2BAAG,6EACC,qYACA,6IAAkH,uBAAGZ,KAAK,oFAAR,2BAAlH,gEACA,4TAGR,yBACI/S,MAAO,CACH7B,gBAAiB,QACjBwV,UAAW,WAGf,6BACA,+DACA,yBACI3T,MAAO,CACHc,QAAS,OACT3C,gBAAiB,OACjB8H,MAAO,QACPhG,OAAQ,OACRgU,aAAc,SAGlB,+DACA,yBAAKjU,MAAO,CAAEsS,SAAU,SACnB,IACD,uBACIS,KAAK,qCADT,cAIK,KAET,8BAEJ,gCC0CGmB,GA9GC,WACd,OACE,yBAAKlU,MAAO,CAAEC,OAAQ,SACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAK,gDACL,kBAAC,IAAD,KAAK,4CACL,kBAAC,IAAD,KAAK,6CAGP,kBAAC,IAAD,KACE,2BAAG,6FAGH,6BACA,6BACA,4BACE,6ZAEuH,8BACvH,6BACA,ygBAI+G,8BAC/G,6BACA,s7BAOA,6BACA,wNAC4G,8BAC5G,6BACA,0SAEsF,8BACtF,6BACA,iZAEoH,gCAGxH,kBAAC,IAAD,KACE,2BACE,yCADF,uXAKF,6BACE,4BACE,4BAAI,yJAGJ,6BACA,gCAAK,iHAGL,6BACA,gCAAK,gIAGL,6BACA,4BAAI,sGAGJ,6BACA,4BAAI,mPAIJ,6BACA,gCAAK,6FAGL,6BACA,4BAAI,wGAGJ,6BACA,4BAAI,wHAGJ,6BACA,4BAAI,uHAKR,kBAAC,IAAD,KACE,2BACE,iDAEF,6BACA,4BACE,4FACA,wFACA,2FCnFG4U,GAnBH,WACR,OACI,6BACI,kBAAC,GAAD,MACA,6BACA,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOC,OAAK,EAAC5J,KAAO,IAAKxF,UAAc+N,KACvC,kBAAC,KAAD,CAAOvI,KAAO,SAASxF,UAAcgO,KACrC,kBAAC,KAAD,CAAOxI,KAAO,UAAWxF,UAAaqP,KACtC,kBAAC,KAAD,CAAO7J,KAAO,SAAUxF,UAAa4N,KACrC,kBAAC,KAAD,CAAOpI,KAAO,SAASxF,UAAcgO,KACrC,kBAAC,KAAD,CAAOxI,KAAO,WAAWxF,UAAcwO,KACvC,kBAAC,KAAD,CAAOhJ,KAAO,WAAWxF,UAAckP,KACvC,kBAAC,KAAD,CAAO1J,KAAO,SAASxF,UAAcgO,QClBrDsB,IAASC,OAAO,kBAAC,KAAD,KAAQ,kBAAC,GAAD,MAAR,KAA2BtR,SAASC,eAAe,U,mBCNnEpK,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.6a624391.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bob_covid_large.e5794150.jpg\";","module.exports = __webpack_public_path__ + \"static/media/social-distancing-together-6-feet.3025edd7.webp\";","module.exports = __webpack_public_path__ + \"static/media/cartoon.bbf0874e.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__vm9hd\",\"search\":\"App_search__1MSqd\",\"date\":\"App_date__36zTr\",\"details\":\"App_details__3iDaL\",\"image\":\"App_image__13QVt\",\"mylegend\":\"App_mylegend__1-M3u\",\"legendscale\":\"App_legendscale__MDhhl\",\"legendlabels\":\"App_legendlabels__2nHhf\",\"legendtitle\":\"App_legendtitle__82TRB\",\"legend\":\"App_legend__2RpP0\",\"button\":\"App_button__2GuRk\",\"button2\":\"App_button2__-IR0M\",\"button1\":\"App_button1__3ivZI\",\"btnContainer\":\"App_btnContainer__3lDiw\",\"skewBtn\":\"App_skewBtn__2J79a\",\"blue\":\"App_blue__2izfq\",\"green\":\"App_green__1s4wv\",\"red\":\"App_red__5DIMF\",\"purple\":\"App_purple__1Ltyz\",\"pink\":\"App_pink__215Kv\"};","module.exports = __webpack_public_path__ + \"static/media/touch.00386186.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Coronavirus-EN-2.e474c70b.png\";","module.exports = __webpack_public_path__ + \"static/media/download.562f272a.jfif\";","module.exports = __webpack_public_path__ + \"static/media/original.8708f808.jfif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3HKAy\",\"infected\":\"Cards_infected__3HcUy\",\"recovered\":\"Cards_recovered__3gTgh\",\"deaths\":\"Cards_deaths__2zt4z\",\"hospitalized\":\"Cards_hospitalized__25Tu9\",\"vaccinated\":\"Cards_vaccinated__HlQx2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__AHgG3\",\"MuiTypography-button\":\"Card_MuiTypography-button__2yHKO\"};","module.exports = __webpack_public_path__ + \"static/media/cuong.dcd1ed41.png\";","module.exports = __webpack_public_path__ + \"static/media/zach.4511bc8e.png\";","module.exports = __webpack_public_path__ + \"static/media/nick.ba8d04b1.png\";","module.exports = __webpack_public_path__ + \"static/media/joe.41174390.png\";","module.exports = __webpack_public_path__ + \"static/media/damon.2225eb61.png\";","module.exports = __webpack_public_path__ + \"static/media/be-kind-to-support.94a83528.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__15tUi\"};","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\nconst url1 = 'http://localhost:8080'\nconst mapurl = '/api/data/';\n\n\n// export const fetchDailyData = async () => {\n//   try {\n//     const { data } = await axios.get(`${url}/daily`);\n\n//     return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n//   } catch (error) {\n//     return error;\n//   }\n// };\n\n// Instead of Global, it fetches the daily data for the US\nexport const fetchDailyData = async() => {\n    try {\n        const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\n\n        return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\n    } catch (error) {\n        return error;\n    }\n};\n\nexport const fetchCountries = async() => {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`);\n\n        return countries.map((country) => country.name);\n    } catch (error) {\n        return error;\n    }\n};\n\n//= ================================================================================================================================================================//\n// Map data//\n// Chart Data 1 Date\nexport const fetchUSByDate = async(date) => {\n    let changeableUrl = url1;\n\n    if (date) {\n        changeableUrl = `${url1}${mapurl}USByDate?date=${date}`;\n        // console.log(changeableUrl);\n    }\n\n    try {\n        const data = await axios.get(changeableUrl);\n        return data.data;\n    } catch (error) {\n        return error;\n    }\n};\n// Chart US Data by Date Range\nexport const fetchUSByDateRange = async(startDate, endDate) => {\n    let changeableUrl = mapurl;\n\n    if (startDate && endDate) {\n        changeableUrl = `${url1}${mapurl}USByDateRange?start=${startDate}&&end=${endDate}`;\n        // console.log(changeableUrl);\n    }\n\n    try {\n        let { data } = await axios.get(changeableUrl);\n        // const { stats } = data;\n//        console.log(data);\n//        console.log(data[0].stats[0].cases);\n        data = data.map(({ stats, date }) => ({ stats, date }));\n        //removed data.reverse()\n        return data;\n    } catch (error) {\n        return error;\n    }\n};\n\n//\nexport const fetchStateNoCountiesByDateRange = async(startDate, endDate, stateName) => {\n    let changeableUrl = mapurl;\n\n    if (startDate && endDate && stateName) {\n        changeableUrl = `${url1}${mapurl}StateNoCountiesByDateRange?start=${startDate}&&end=${endDate}&&state=${stateName}`;\n//        console.log(changeableUrl);\n    }\n\n    try {\n        const { data } = await axios.get(changeableUrl);\n//        console.log(data);\n//        console.log(data[0]);\n        // data.map(({ stats, date }) => ({ stats, date }));\n        //removed data.reverse()\n        return data;\n    } catch (error) {\n        return error;\n    }\n};\n\n// Chart US Data by Date Range using One State by Date\nexport const fetchOneStateByDateRange = async(endDate, stateName) => {\n    let changeableUrl = mapurl;\n    // const stateDates = [];\n    // const stateCases = [];\n    const stateArray = [];\n    let curDate = new Date();\n    const yyyy = '2021';\n    const mm = '03';\n    let dayCount = 1;\n    curDate = `${yyyy}-${mm}-0${dayCount}`;\n\n    if (endDate && stateName) {\n        changeableUrl = `${url1}${mapurl}OneStateByDate?date=${curDate}&&state=${stateName}`;\n        // console.log(changeableUrl);\n    }\n\n    try {\n        let i = 0;\n        let data = await axios.get(changeableUrl);\n        while (curDate !== endDate) {\n            // console.log(data);\n            stateArray[i] = data;\n            // console.log(stateArray);\n            i += 1;\n            dayCount += 1;\n            curDate = `${yyyy}-${mm}-${dayCount}`;\n            if (dayCount < 10) {\n                curDate = `${yyyy}-${mm}-0${dayCount}`;\n            }\n            changeableUrl = `${url1}${mapurl}OneStateByDate?date=${curDate}&&state=${stateName}`;\n            data = await axios.get(changeableUrl);\n        }\n        // const { data } = await axios.get(changeableUrl);\n        // return data.reverse();\n        return stateArray;\n    } catch (error) {\n        return error;\n    }\n};\n\nexport const fetchAllStatesByDate = async(date) => {\n    let changeableUrl = mapurl;\n\n    if (date) {\n        changeableUrl = `${url1}${mapurl}AllStatesByDate?date=${date}`;\n        // console.log(changeableUrl);\n    }\n\n    try {\n        const data = await axios.get(changeableUrl);\n        return data.data;\n        console.log(data.data);\n    } catch (error) {\n        return error;\n    }\n};\n\nexport const fetchCountyByDate = async(state, date) => {\n    let changeableUrl = mapurl;\n    if (date) {\n        changeableUrl = `${url1}${mapurl}OneStateByDate?date=${date}&&state=${state}`;\n        console.log(changeableUrl);\n    }\n\n    try {\n        const data = await axios.get(changeableUrl);\n        console.log(data.data);\n        console.log(data.data.state);\n        return data.data;\n    } catch (error) {\n        return error;\n    }\n};\n\nexport const fetchCountyByDateRange = async(startDate, endDate, stateName, countyName) => {\n    let changeableUrl = mapurl;\n    if(startDate && endDate && countyName){\n        changeableUrl = `${url1}${mapurl}CountyByDateRange?start=${startDate}&&end=${endDate}&&state=${stateName}&&county=${countyName}`;\n        console.log(changeableUrl);\n    }\n    try {\n        const data = await axios.get(changeableUrl);\n        console.log(data);\n        return data.data;\n    } catch (error){\n        return error;\n    }\n};","import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nimport { fetchDailyData, fetchUSByDate, fetchUSByDateRange, fetchStateNoCountiesByDateRange, fetchCountyByDateRange } from '../../api';\nimport styles from './Chart.module.css';\n\n// Temporary var for state name, should be changed from const to var later\nconst stateName = 'Texas';\nlet test = new Date();\nlet test1 = new Date();\nlet test2 = new Date();\n// let testLastWeek = new Date(\"2021/04/11\");\n// let testLastMonth = new Date(\"2021/03/18\");\nlet testLastWeek = new Date();\nlet testLastMonth = new Date();\nlet testLastYear = new Date();\n// const { date } = this.props;\ntest = '2021-03-20';\ntest1 = '2020-03-20';\ntest2 = '2021-03-22';\n// testLastWeek = '2021-04-11';\n// testLastMonth = '2021-03-18';\n\n\nlet ifState = false;\nlet ifCounty = false;\n\nfunction dataMap(data) {\n    if(data.hasOwnProperty('state'))\n        return data.map((index) => index.state.stats[0].cases);\n    else\n        return data.map((index) => index.stats[0].cases);\n }\n\nfunction setDateBackMonth(date){\n    let year = parseInt(date.substring(0,4));\n    let month = parseInt(date.substring(5,7)-1);\n    let day = parseInt(date.substring(8,10));\n\n    if(month < 1){\n        year--;\n        month = 12;\n    }\n\n    if(month.toString().length<2)\n        month = '0' + month;\n    if(day.toString().length<2)\n        day = '0' + day;\n\n    return year + '-'+month+'-'+day;\n}\n\nfunction setDateBackYear(date){\n    let year = parseInt(date.substring(0,4)-1);\n    let month = parseInt(date.substring(5,7));\n    let day = parseInt(date.substring(8,10));\n\n    if(month.toString().length<2)\n            month = '0' + month;\n        if(day.toString().length<2)\n            day = '0' + day;\n\n        return year + '-'+month+'-'+day;\n}\n\nfunction setDateBackWeek(date){\n    let year = parseInt(date.substring(0,4));\n    let month = parseInt(date.substring(5,7));\n    let day = parseInt(date.substring(8,10)-7);\n\n    if(day < 1){\n        month--;\n        let temp = 31 + day;\n        day = temp;\n    }\n\n    if(month < 1){\n        year--;\n        month = 12;\n    }\n\n    if(month.toString().length<2)\n            month = '0' + month;\n    if(day.toString().length<2)\n            day = '0' + day;\n\n    return year + '-'+month+'-'+day;\n\n}\n\n\nconst Chart = ({country, nbdate, cond, countyName, sname, width, height}) => {\n\n\n    const [dailyData, setDailyData] = useState({});\n    const [weekData, setWeekData] = useState({});\n    const [monthData, setMonthData] = useState({});\n\n\n    testLastMonth = setDateBackMonth(nbdate);\n    testLastWeek = setDateBackWeek(nbdate);\n    testLastYear = setDateBackYear(nbdate);\n\n\n//     console.log(cond);\n//     console.log(country);\n    if(sname !== 'USA')\n        ifState = true;\n    else\n        ifState = false;\n\n    if(countyName !== null){\n        ifCounty = true;\n    }\n    else\n        ifCounty = false;\n\n    useEffect(() => {\n        const fetchMyAPI = async () => {\n\n            const nbDataRange = await fetchUSByDateRange(testLastYear, nbdate);\n            const nbDataRangeWeek = await fetchUSByDateRange(testLastWeek, nbdate);\n            const nbDataRangeMonth = await fetchUSByDateRange(testLastMonth, nbdate);\n//             console.log(nbDataRange);\n//             console.log(nbDataRange[367].stats[0]);\n\n\n\n\n\n\n//             console.log(countyData);\n\n//             console.log(dataMap(nbStateData));\n\n              console.log(countyName);\n\n\n            if(countyName !== null){\n                            const countyDataWeek = await fetchCountyByDateRange(testLastWeek, nbdate, country, countyName);\n                            const countyDataMonth = await fetchCountyByDateRange(testLastMonth, nbdate, country, countyName);\n                            const countyData = await fetchCountyByDateRange(testLastYear, nbdate, country, countyName);\n                            console.log(countyData);\n\n                            setWeekData(countyDataWeek);\n                            setMonthData(countyDataMonth);\n                            setDailyData(countyData);\n                        }\n                        else if(ifState){\n                            const nbStateDataWeek = await fetchStateNoCountiesByDateRange(testLastWeek, nbdate, country);\n                            const nbStateDataMonth = await fetchStateNoCountiesByDateRange(testLastMonth, nbdate, country);\n                            const nbStateData = await fetchStateNoCountiesByDateRange(testLastYear, nbdate, country);\n                            setWeekData(nbStateDataWeek);\n                            setMonthData(nbStateDataMonth);\n                            setDailyData(nbStateData);\n                        }\n                        else{\n                            setWeekData(nbDataRangeWeek);\n                            setMonthData(nbDataRangeMonth);\n                            setDailyData(nbDataRange);\n                        }\n\n\n\n        };\n\n        fetchMyAPI();\n    }, [country, countyName]);\n\n    useEffect(() => {\n        const fetchMyAPI = async () => {\n\n            if(sname !== 'USA'){\n                ifState = true;\n            }\n            else\n                ifState = false;\n\n            if(countyName !== null){\n                ifCounty = true;\n            }\n            else\n                ifCounty = false;\n\n            const nbDataRangeWeek = await fetchUSByDateRange(testLastWeek, nbdate);\n            const nbDataRangeMonth = await fetchUSByDateRange(testLastMonth, nbdate);\n            const nbDataRange = await fetchUSByDateRange(testLastYear, nbdate);\n\n\n            // console.log(nbdate);\n//              console.log(nbDataRange);\n//              console.log(nbStateData);\n\n\n\n\n//             console.log(countyData);\n\n            console.log(countyName);\n            console.log(country);\n\n            if(countyName !== null){\n                const countyDataWeek = await fetchCountyByDateRange(testLastWeek, nbdate, country, countyName);\n                const countyDataMonth = await fetchCountyByDateRange(testLastMonth, nbdate, country, countyName);\n                const countyData = await fetchCountyByDateRange(testLastYear, nbdate, country, countyName);\n                console.log(countyData);\n                setWeekData(countyDataWeek);\n                setMonthData(countyDataMonth);\n                setDailyData(countyData);\n            }\n            else if(ifState){\n                const nbStateDataWeek = await fetchStateNoCountiesByDateRange(testLastWeek, nbdate, country);\n                const nbStateDataMonth = await fetchStateNoCountiesByDateRange(testLastMonth, nbdate, country);\n                const nbStateData = await fetchStateNoCountiesByDateRange(testLastYear, nbdate, country);\n                setWeekData(nbStateDataWeek);\n                setMonthData(nbStateDataMonth);\n                setDailyData(nbStateData);\n            }\n            else{\n                setWeekData(nbDataRangeWeek);\n                setMonthData(nbDataRangeMonth);\n                setDailyData(nbDataRange);\n            }\n\n\n\n        };\n\n        fetchMyAPI();\n    }, [nbdate, country, countyName]);\n    // Uncomment the block of line charts below to display a range of US Total Data By DateRange\n    let lineChart1 = null;\n    let lineChart2 = null;\n    let lineChart3 = null;\n\n//     console.log(dailyData[0]);\n// data: dailyData.map(({ stats }) => stats[0].cases),\n    const lineChart1Cases = (\n        dailyData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [{\n                        data: dailyData.map(({ stats }) => stats[0].cases),\n                        label: 'Cases',\n                        borderColor: '#3333ff',\n                        backgroundColor: 'rgba(0, 0, 255, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options={{\n                    legend: { display: false, reverse: true },\n                    title: { display: true, text: `${sname} Cases by Year` },\n                }}\n            />\n        ) : null\n    );\n\n\n\n    const lineChart2Cases = (\n        monthData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: monthData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [{\n                        data: monthData.map(({ stats }) => stats[0].cases),\n                        label: 'Cases',\n                        borderColor: 'blue',\n                        backgroundColor: 'rgba(0, 0, 255, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options={{\n                    legend: { display: false },\n                    title: { display: true, text: `${sname} Cases by Month` },\n                }}\n            />\n        ) : null\n    );\n\n    const lineChart3Cases = (\n        weekData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: weekData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [{\n                        data: weekData.map(({ stats }) => stats[0].cases),\n                        label: 'Cases',\n                        borderColor: 'blue',\n                        backgroundColor: 'rgba(0, 0, 255, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options={{\n                    legend: { display: false, reverse: true },\n                    title: { display: true, text: `${sname} Cases by Week` },\n                }}\n            />\n        ) : null\n    );\n    const lineChart1Deaths = (\n        dailyData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [{\n                        data: dailyData.map(({ stats }) => stats[0].deaths),\n                        label: 'Deaths',\n                        borderColor: 'rgba(255, 0, 0, 0.5)',\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options={{\n                    legend: { display: false, reverse: true },\n                    title: { display: true, text: `${sname} Deaths by Year` },\n                }}\n            />\n        ) : null\n    );\n    const lineChart2Deaths = (\n        monthData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: monthData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [{\n                        data: monthData.map(({ stats }) => stats[0].deaths),\n                        label: 'Deaths',\n                        borderColor: 'rgba(255, 0, 0, 0.5)',\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options={{\n                    legend: { display: false, reverse: true },\n                    title: { display: true, text: `${sname} Deaths by Month` },\n                }}\n            />\n        ) : null\n    );\n    const lineChart3Deaths = (\n        weekData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: weekData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [{\n                        data: weekData.map(({ stats }) => stats[0].deaths),\n                        label: 'Deaths',\n                        borderColor: 'rgba(255, 0, 0, 0.5)',\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options={{\n                    legend: { display: false, reverse: true },\n                    title: { display: true, text: `${sname} Deaths by Week` },\n                }}\n            />\n        ) : null\n    );\n\n    const lineChart1NewCases = (\n        dailyData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [{\n                        data: dailyData.map(({ stats }) => stats[0].newCases),\n                        label: 'New Cases',\n                        borderColor: 'rgba(0, 255, 0, 0.5)',\n                        backgroundColor: 'rgba(0, 255, 0, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options={{\n                    legend: { display: false, reverse: true },\n                    title: { display: true, text: `${sname} New Cases by Year` },\n                }}\n            />\n        ) : null\n    );\n    const lineChart2NewCases = (\n        monthData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: monthData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [{\n                        data: monthData.map(({ stats }) => stats[0].newCases),\n                        label: 'New Cases',\n                        borderColor: 'rgba(0, 255, 0, 0.5)',\n                        backgroundColor: 'rgba(0, 255, 0, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options={{\n                    legend: { display: false, reverse: true },\n                    title: { display: true, text: `${sname} New Cases by Month` },\n                }}\n            />\n        ) : null\n    );\n    const lineChart3NewCases = (\n        weekData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: weekData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [{\n                        data: weekData.map(({ stats }) => stats[0].newCases),\n                        label: 'New Cases',\n                        borderColor: 'rgba(0, 255, 0, 0.5)',\n                        backgroundColor: 'rgba(0, 255, 0, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options={{\n                    legend: { display: false, reverse: true },\n                    title: { display: true, text: `${sname} New Cases by Week` },\n                }}\n            />\n        ) : null\n    );\n\n//old vaccine charts\n//     const lineChart1Vaccinations = (\n//         dailyData[0] ? (\n//             <Line width={width} height={height}\n//                 data={{\n//                     labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n//                     datasets: [{\n//                         data: dailyData.map(({ stats }) => stats[0].peopleVaccinated),\n//                         label: 'Vaccinations',\n//                         borderColor: 'rgba(60, 0, 200, 0.5)',\n//                         backgroundColor: 'rgba(60, 0, 200, 0.5)',\n//                         fill: true,\n//                     },\n//                     ],\n//                 }}\n//                 options={{\n//                     legend: { display: false, reverse: true },\n//                     title: { display: true, text: `${sname} Vaccinations by Year` },\n//                 }}\n//             />\n//         ) : null\n//     );\n//     const lineChart2Vaccinations = (\n//         monthData[0] ? (\n//             <Line width={width} height={height}\n//                 data={{\n//                     labels: monthData.map(({ date }) => new Date(date).toLocaleDateString()),\n//                     datasets: [{\n//                         data: monthData.map(({ stats }) => stats[0].peopleVaccinated),\n//                         label: 'Vaccinations',\n//                         borderColor: 'rgba(60, 0, 200, 0.5)',\n//                         backgroundColor: 'rgba(60, 0, 200, 0.5)',\n//                         fill: true,\n//                     },\n//                     ],\n//                 }}\n//                 options={{\n//                     legend: { display: false, reverse: true },\n//                     title: { display: true, text: `${sname} Vaccinations by Month` },\n//                 }}\n//             />\n//         ) : null\n//     );\n//     const lineChart3Vaccinations = (\n//         weekData[0] ? (\n//             <Line width={width} height={height}\n//                 data={{\n//                     labels: weekData.map(({ date }) => new Date(date).toLocaleDateString()),\n//                     datasets: [{\n//                         data: weekData.map(({ stats }) => stats[0].peopleVaccinated),\n//                         label: 'Vaccinations',\n//                         borderColor: 'rgba(60, 0, 200, 0.5)',\n//                         backgroundColor: 'rgba(60, 0, 200, 0.5)',\n//                         fill: true,\n//                     },\n//                     ],\n//                 }}\n//                 options={{\n//                     legend: { display: false, reverse: true },\n//                     title: { display: true, text: `${sname} Vaccinations by Week` },\n//                 }}\n//             />\n//         ) : null\n//     );\n    const LineChart1VaccNew = (\n        dailyData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [\n                        {\n                            data: dailyData.map(({ stats }) => stats[0].vaccinesDistributed),\n                            label: 'Vaccines Distributed',\n                            borderColor: 'rgba(0, 255, 0, 0.5)',\n                            fill: false,\n                        },\n                        {\n                            data: dailyData.map(({ stats }) => stats[0].firstDose),\n                            label: 'First Dose',\n                            borderColor: 'rgba(255, 0, 0, 0.5)',\n                            fill: false,\n                        },\n                        {\n                            data: dailyData.map(({ stats }) => stats[0].secondDose),\n                            label: 'Second Dose',\n                            borderColor: 'rgba(0, 0, 255, 0.5)',\n                            fill: false,\n                        },\n                        {\n                            data: dailyData.map(({ stats }) => stats[0].dailyVaccinated),\n                            label: 'Daily Vaccinations',\n                            borderColor: 'rgba(60, 0, 200, 0.5)',\n                            fill: false\n                        },\n                    ],\n                }}\n                options={{\n                    legend: { display: true, reverse: true },\n                    title: { display: true, text: `${sname} Vaccination Data` },\n                }}\n            />\n        ) : null\n    );\n    const LineChart2VaccNew = (\n            monthData[0] ? (\n                <Line width={width} height={height}\n                    data={{\n                        labels: monthData.map(({ date }) => new Date(date).toLocaleDateString()),\n                        datasets: [\n                            {\n                                data: monthData.map(({ stats }) => stats[0].vaccinesDistributed),\n                                label: 'Vaccines Distributed',\n                                borderColor: 'rgba(0, 255, 0, 0.5)',\n                                fill: false,\n                            },\n                            {\n                                data: monthData.map(({ stats }) => stats[0].firstDose),\n                                label: 'First Dose',\n                                borderColor: 'rgba(255, 0, 0, 0.5)',\n                                fill: false,\n                            },\n                            {\n                                data: monthData.map(({ stats }) => stats[0].secondDose),\n                                label: 'Second Dose',\n                                borderColor: 'rgba(0, 0, 255, 0.5)',\n                                fill: false,\n                            },\n                            {\n                                data: monthData.map(({ stats }) => stats[0].dailyVaccinated),\n                                label: 'Daily Vaccinations',\n                                borderColor: 'rgba(60, 0, 200, 0.5)',\n                                fill: false\n                            },\n                        ],\n                    }}\n                    options={{\n                        legend: { display: true, reverse: true },\n                        title: { display: true, text: `${sname} Vaccination Data By Month` },\n                    }}\n                />\n            ) : null\n        );\n        const LineChart3VaccNew = (\n                weekData[0] ? (\n                    <Line width={width} height={height}\n                        data={{\n                            labels: weekData.map(({ date }) => new Date(date).toLocaleDateString()),\n                            datasets: [\n                                {\n                                    data: weekData.map(({ stats }) => stats[0].vaccinesDistributed),\n                                    label: 'Vaccines Distributed',\n                                    borderColor: 'rgba(0, 255, 0, 0.5)',\n                                    fill: false,\n                                },\n                                {\n                                    data: weekData.map(({ stats }) => stats[0].firstDose),\n                                    label: 'First Dose',\n                                    borderColor: 'rgba(255, 0, 0, 0.5)',\n                                    fill: false,\n                                },\n                                {\n                                    data: weekData.map(({ stats }) => stats[0].secondDose),\n                                    label: 'Second Dose',\n                                    borderColor: 'rgba(0, 0, 255, 0.5)',\n                                    fill: false,\n                                },\n                                {\n                                    data: weekData.map(({ stats }) => stats[0].dailyVaccinated),\n                                    label: 'Daily Vaccinations',\n                                    borderColor: 'rgba(60, 0, 200, 0.5)',\n                                    fill: false\n                                },\n                            ],\n                        }}\n                        options={{\n                            legend: { display: true, reverse: true },\n                            title: { display: true, text: `${sname} Vaccination Data By Week` },\n                        }}\n                    />\n                ) : null\n            );\n\n    const lineChart1Hosp = (\n        dailyData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [{\n                        data: dailyData.map(({ stats }) => stats[0].hospitalized),\n                        label: 'Hospitalizations',\n                        borderColor: 'rgba(255,192,203, 0.5)',\n                        backgroundColor: 'rgba(255,192,203, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options={{\n                    legend: { display: false, reverse: true },\n                    title: { display: true, text: `${sname} Hospitalizations by Year` },\n                }}\n            />\n        ) : null\n    );\n    const lineChart2Hosp = (\n        monthData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: monthData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [{\n                        data: monthData.map(({ stats }) => stats[0].hospitalized),\n                        label: 'Hospitalizations',\n                        borderColor: 'rgba(255,192,203, 0.5)',\n                        backgroundColor: 'rgba(255,192,203, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options={{\n                    legend: { display: false, reverse: true },\n                    title: { display: true, text: `${sname} Hospitalizations by Month` },\n                }}\n            />\n        ) : null\n    );\n    const lineChart3Hosp = (\n        weekData[0] ? (\n            <Line width={width} height={height}\n                data={{\n                    labels: weekData.map(({ date }) => new Date(date).toLocaleDateString()),\n                    datasets: [{\n                        data: weekData.map(({ stats }) => stats[0].hospitalized),\n                        label: 'Hospitalizations',\n                        borderColor: 'rgba(255,192,203, 0.5)',\n                        backgroundColor: 'rgba(255,192,203, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options={{\n                    legend: { display: false, reverse: true },\n                    title: { display: true, text: `${sname} Hospitalizations by Week` },\n                }}\n            />\n        ) : null\n    );\n\n\n\n    if(cond === 'cases'){\n//         console.log(cond);\n        lineChart1 = lineChart1Cases;\n        lineChart2 = lineChart2Cases;\n        lineChart3 = lineChart3Cases;\n    }\n    else if(cond === 'deaths'){\n        //set lineChart1 2 and 3 to a deaths chart\n//         console.log(cond);\n        lineChart1 = lineChart1Deaths;\n        lineChart2 = lineChart2Deaths;\n        lineChart3 = lineChart3Deaths;\n    }\n    else if(cond === 'newcases'){\n//         console.log(cond);\n        lineChart1 = lineChart1NewCases;\n        lineChart2 = lineChart2NewCases;\n        lineChart3 = lineChart3NewCases;\n    }\n    else if(cond === 'vaccinations'){\n//         console.log(cond);\n//         lineChart1 = lineChart1Vaccinations;\n\n//         lineChart2 = lineChart2Vaccinations;\n//         lineChart3 = lineChart3Vaccinations;\n        lineChart1 = LineChart1VaccNew;\n        lineChart2 = LineChart2VaccNew;\n        lineChart3 = LineChart3VaccNew;\n    }\n    else if(cond === 'hospitalizations'){\n//         console.log(cond);\n        lineChart1 = lineChart1Hosp;\n        lineChart2 = lineChart2Hosp;\n        lineChart3 = lineChart3Hosp;\n    }\n\n\n\n    return (\n        <div>\n            <div style={{ margin: \"20px\" }}>\n                <Tabs>\n                    <TabList>\n                        <Tab>By Week</Tab>\n                        <Tab>By Month</Tab>\n                        <Tab>By Year</Tab>\n                    </TabList>\n\n                    <TabPanel>\n                        {sname && lineChart3}\n                    </TabPanel>\n                    <TabPanel>\n                            {sname && lineChart2}\n                    </TabPanel>\n                    <TabPanel>\n                        {sname && lineChart1}\n                    </TabPanel>\n                </Tabs>\n            </div>\n            {/* {country ? barChart : lineChart} */}\n            {/*{country ? lineChart1 : barChart}*/}\n            {/*{country ? lineChart2 : barChart}*/}\n            {/*{country ? lineChart3 : barChart}*/}\n        </div>\n    );\n};\n\nexport default Chart;\n","import React from 'react';\n\nconst SearchBar = ({input:keyword, onChange:updateInput, onBlur:onSearchBlur, onKeyPress:onSearchKeyUp}) => {\n    const BarStyling = {width:\"20rem\",background:\"#F2F1F9\", border:\"none\", padding:\"0.5rem\", width:\"325px\"};\n    return (\n        <input\n            style={BarStyling}\n            key=\"1234\"\n            value={keyword}\n            placeholder={\"Search\"}\n            list=\"county-list\"\n            onChange={(e) => updateInput(e.target.value)}\n            onBlur={(e) => onSearchBlur(e.target.value)}\n            onKeyPress={(e) => onSearchKeyUp(e)}\n        />\n    );\n}\n\nexport default SearchBar\n","import React, { useEffect, useState } from 'react';\nimport { Info, Chart, USMap, News } from '../../components';\nimport './SearchBar.css';\n\nconst CountyList = ({countyList=[]}) => {\n  const dropdownClicked = function(e) {\n    //do nothing\n  }\n  return (\n    <div id='dropdown_option_div' className='dropdown_hidden'>\n    { countyList.map((data,index) => {\n        if (data) {\n          return (\n            <div>\n              <div class='dropdown_option' key={data + \" (Cases)\"} data-innput={data + \" (Cases)\"} onClick={(e) => dropdownClicked(e)} tabindex=\"0\">\n                <span>{data}</span> <span class='dropdown_option_cond cond_cases'>(Cases)</span>\n              </div>\n              <div class='dropdown_option' key={data + \" (New Cases)\"} data-innput={data + \" (New Cases)\"} onClick={(e) => dropdownClicked(e)} tabindex=\"0\">\n                <span>{data}</span> <span class='dropdown_option_cond cond_new_cases'>(New Cases)</span>\n              </div>\n              <div class='dropdown_option' key={data + \" (Deaths)\"} data-innput={data + \" (Deaths)\"} onClick={(e) => dropdownClicked(e)} tabindex=\"0\">\n                <span>{data}</span> <span class='dropdown_option_cond cond_deaths'>(Deaths)</span>\n              </div>\n              <div class='dropdown_option' key={data + \" (Vaccinations)\"} data-innput={data + \" (Vaccinations)\"} onClick={(e) => dropdownClicked(e)} tabindex=\"0\">\n                <span>{data}</span> <span class='dropdown_option_cond cond_vacc'>(Vaccinated)</span>\n              </div>\n            </div>\n    \t   )\t\n    \t }\n    \t return null\n    }) }\n    </div>\n\n  );\n}\n\nexport default CountyList\n","import React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport CountyList from './CountyList';\nimport { Info, Chart, USMap, News } from '../../components';\n\n\nconst stateData = require('./StateData.json');\nconst countyData = require('./CountyData.json');\n// const countyData = require('./CountyData.json');\n\nfunction hasClass( target, className ) {\n  if(target == null) {\n    return false;\n  }\n  return new RegExp('(\\\\s|^)' + className + '(\\\\s|$)').test(target.className);\n}\n\nfunction convertToSlug(Text)\n{\n    return Text\n        .toLowerCase()\n        .replace(/[^\\w ]+/g,'')\n        .replace(/ +/g,'_')\n        ;\n}\n\nconst SearchPage = ({cond, setCond}) => {\n  const [input, setInput] = useState('');\n  const [countyListDefault, setCountyListDefault] = useState();\n  const [countyList, setCountyList] = useState();\n\n  const [stateListDefault, setStateListDefault] = useState();\n  const [stateList, setStateList] = useState();\n  //const [cond, setCond] = useState(null);\n\n\n  const fetchData = async () => {\n    var countylist_temp = []\n    var entries = Object.entries(countyData)\n    for(const [state, counties] of entries ) {\n      for(const county of counties) {\n        countylist_temp.push(county + \", \" + state)\n      }\n    }\n    setCountyList([])\n    setCountyListDefault(countylist_temp)\n    setStateList([])\n    setStateListDefault(stateData.data)\n  }\n\n    /* \n  * onSearchBlur \n  * Triggers on SearchBar blur event\n  */\n  const onSearchBlur = function(e) {\n    console.log(e);\n    stateZoom(e);\n    document.getElementById(\"dropdown_option_div\").classList.add('dropdown_hidden')\n  }\n\n  /* \n  * onSearchKeyUp \n  * Triggers on SearchBar onKeyUp event\n  */\n  const onSearchKeyUp = function(e) {\n    document.getElementById(\"dropdown_option_div\").classList.remove('dropdown_hidden')\n    if(e.key === \"Enter\") {\n      e.target.blur();\n    }\n  }\n\n  /** \n  * stateZoom \n  * Zoom into state on USMap. Takes search string as input.\n  * Input syntax: \"STATE (CONDITION)\"\n  * OR\n  *               \"COUNTY, STATE (CONDITION)\"\n  * where STATE is any U.S. state (case insensitive)\n  * and COUNTY is any U.S county (case insensitive)\n  * and CONDITION is the data type to search for eg. \"deaths\" (case insensitive)\n  */\n  const stateZoom = function(input) {\n    if(!input.includes(',')) {\n      var state_str = input.slice(0, input.indexOf('(')).toLowerCase(); // first word of input\n      var cond_str = input.slice(input.indexOf('(')+1, input.indexOf(')')).toLowerCase(); // word between parenthesis in input\n    }\n    else {\n      var county_str = convertToSlug(input.slice(0,input.indexOf(',')).toLowerCase());\n      var state_str = input.slice(input.indexOf(',') + 2, input.indexOf('(')).toLowerCase();\n      var cond_str = input.slice(input.indexOf('(')+1, input.indexOf(')')).toLowerCase(); // word between parenthesis in input\n    }\n    state_str = state_str.replace(/^\\s+|\\s+$/g, \"\"); // remove trailing or leading spaces\n    cond_str = cond_str.replace(/\\s/g, ''); //remove spaces in condition string\n    var state;\n    var county;\n    if(cond_str === \"cases\" || cond_str ===\"newcases\" || cond_str ===\"deaths\" || cond_str === \"vaccinations\") {\n      setCond(cond_str);\n    }\n    if(state_str){ // click on state if there is a state string\n      setTimeout(() => { \n        state = document.getElementById(state_str); \n        if(state) {\n          state.dispatchEvent(new Event('click')); \n          setTimeout(() => {\n            console.log(\"clicking detail button\")\n            console.log(document.getElementById('get_details_btn'))\n            document.getElementById('get_details_btn').dispatchEvent(new Event('click')); \n          }, 1000);\n        }\n      }, 1000);\n    }\n    if(input.includes(',') && county_str) { // click on county is the input is for counties\n      setTimeout(() => { \n        county = document.getElementById(county_str);\n        if(county) {\n          county.dispatchEvent(new Event('click')); \n          setTimeout(() => {\n            document.getElementById('get_details_btn').dispatchEvent(new Event('click')); \n          }, 1000);\n        }\n      }, 1000);\n    }\n  }\n\n  /* \n  * updateInput \n  * Set the list of suggested options in CountyList that appears under SearchBar\n  * Triggered on SearchBar onChange event\n  */\n  const updateInput = async (input) => {\n    const filtered = stateListDefault.filter(state => {\n      return state.toLowerCase().startsWith(input.toLowerCase())\n    }).concat(countyListDefault.filter(county => {\n      return county.toLowerCase().includes(input.toLowerCase())\n    }))\n    setInput(input);\n    setStateList(filtered);\n  }\n\n  useEffect( () => {fetchData()},[]);\n\t\n  return (\n    <>\n      <SearchBar \n       input={input} \n       onChange={updateInput}\n       onBlur={onSearchBlur}\n       onKeyPress={onSearchKeyUp}\n      />\n      <CountyList countyList={stateList}/>\n    </>\n   );\n}\n\nexport default SearchPage\n","\nexport const countyValues = (data, value) => {\n  const percents = [];\n  const { counties } = data.state;\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < counties.length; i++) {\n    percents.push(counties[i].stats[0][value]);\n  }\n  // eslint-disable-next-line prefer-spread\n  const min = Math.min.apply(Math, percents);\n  // eslint-disable-next-line prefer-spread\n  const max = Math.max.apply(Math, percents);\n  const diff = max - min;\n  const interval = diff / 4;\n  return [min, min + interval, min + interval * 2, min + interval * 3, max];\n};\n\nexport const stateValues = (data, value) => {\n  const percents = [];\n  const { states } = data;\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < states.length; i++) {\n    if (states[i].name !== \"District of Columbia\")\n      percents.push(states[i].stats[0][value]);\n  }\n  // eslint-disable-next-line prefer-spread\n  const min = Math.min.apply(Math, percents);\n  // eslint-disable-next-line prefer-spread\n  const max = Math.max.apply(Math, percents);\n  const diff = max - min;\n  const interval = diff / 4;\n  return [min, min + interval, min + interval * 2, min + interval * 3, max];\n};\n\n","import React from 'react';\nimport { Card, Paper, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n//import '../../../App.css'\n\nimport styles from './Card.module.css';\n\nconst CardComponent = ({ className, cardTitle, value, lastUpdate, cardSubtitle }) => (\n  <Grid item xs={12} md={2} component={Paper} className={cx(styles.card, className)}>\n    <CardContent>\n      <Typography color=\"textSecondary\" gutterBottom>\n        {cardTitle}\n      </Typography>\n      <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginBottom:\"2em\"}}>\n        <CountUp start={0} end={value} duration={2.75} separator=\",\" />\n      </Typography>\n\n    </CardContent>\n  </Grid>\n);\n\n\n\nexport default CardComponent;\n\n","import React, {useState, useEffect, useRef, useLayoutEffect} from 'react';\nimport d3tip from 'd3-tip';\nimport * as topojson from \"topojson-client/src\";\nimport * as d3 from 'd3';\nimport {fetchAllStatesByDate, fetchUSByDate, fetchCountyByDate} from '../../api/';\nimport axios from \"axios\";\nimport {Chart, Infos} from \"../index\";\nimport range from 'lodash/range';\nimport {getMonth, getYear} from 'date-fns';\nimport '../../App.css';\nimport styles from '../../App.module.css';\nimport stylescard from '../Cards/Cards.module.css';\nimport DatePicker from 'react-datepicker';\nimport moment from 'moment';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport addDays from 'add-days';\nimport SearchPage from '../../components/SearchBar/SearchPage.js';\nimport {Grid} from '@material-ui/core';\nimport {reset} from \"react-tabs/lib/helpers/uuid\";\nimport { countyValues } from '../Legend/Legend';\nimport { stateValues } from '../Legend/Legend';\nimport CardComponent from \"../Cards/Card/Card\";\nimport \"./USMaps.css\";\nconst USMaps = ({date, cond}) => {\n    const [toggleState, setToggleState] = useState(1);\n\n    const toggleTab = (index) => {\n        setToggleState(index);\n    };\n    const [check2, setcheck2] = useState(false);\n    function activatelayer() {\n        setcheck2(check2 => check2 == false ? true : false);\n    }\n    const [sname, setsname] = useState('USA');\n    const [snamestate, setsnamestate] = useState(null);\n    const myRef = useRef(null);\n    const [statedata, setMapData] = useState(null);\n    const [us, setus] = useState(null);\n    const [check, setcheck] = useState(false);\n    const [data2, setData2] = useState(null);\n    const [check1, setcheck1] = useState(false);\n    const [ccases,setccases] = useState(null);\n    const [cdeath,setcdeath] = useState(null);\n    const [cnewc,setcnewc] = useState(null);\n    const [cvac,setcvac] = useState(null);\n    const [chos,setchos] = useState(null);\n    const[state, setState] = useState(null);\n    const [countyName,setCounty] = useState(null);\n    const[color,setColor] = useState(null);\n    const[domain,setDomain] = useState(null);\n    // const [cond, setCond] = useState(null);\n    let countyCaseDomain = undefined;\n    let countyDeathDomain = undefined;\n    let countyNewDomain = undefined;\n    let stateDomain = undefined;\n    let blues = ['#AAFFFC', '#66D9FF', '#44ABFF', '#2372FF', '#052FFF'];\n    let greens = ['#dee5d1', '#91b588', '#76b378', '#1E9F3E', '#178048'];\n    let reds = ['#F08080', '#CD5C5C', '#FF0000', '#B22222', '#8b0000'];\n    let purples = ['#CCCEFF', '#ABAAFF', '#A388FF', '#A966FF', '#BC44FF'];\n    let pinks = ['#F5CCFF', '#ffaaff', '#FF88F2', '#FF67CF', '#FF49A2'];\n\n    let countyColorCases = d3.scaleThreshold() //blues\n        .domain([10001, 50001, 100001, 250000, 250001])\n        .range(['#AAFFFC', '#66D9FF', '#44ABFF', '#2372FF', '#052FFF']);\n\n    let countyColorRecovered = d3.scaleThreshold() //greens\n        .domain([101, 501, 1001, 2500, 2501])\n        .range(['#dee5d1', '#91b588', '#76b378', '#1E9F3E', '#178048']);\n\n    let countyColorDeaths = d3.scaleThreshold() //reds\n        .domain([101, 501, 1001, 2500, 2501])\n        .range(['#F08080', '#CD5C5C', '#FF0000', '#B22222', '#8b0000']);\n\n    let countyColorVac = d3.scaleThreshold() //purples\n        .domain([101, 501, 1001, 2500, 2501])\n        .range(['#CCCEFF', '#ABAAFF', '#A388FF', '#A966FF', '#BC44FF']);\n\n    let countyColorHosp = d3.scaleThreshold() //pinks\n        .domain([101, 501, 1001, 2500, 2501])\n        .range(['#F5CCFF', '#FFAAFF', '#FF88F2', '#FF67CF', '#FF49A2']);\n    let county = useRef(null);\n    let counties = useRef(null);\n    let states = useRef(null);\n    let curstate;\n    let stateColor = null;\n    let stage = useRef(0);\n    let countyColor = null;\n    const margin = {\n        top: 10,\n        bottom: 10,\n        left: 10,\n        right: 10\n    };\n    let active = d3.select(null);\n    \n    function convertToSlug(Text){\n        return Text\n            .toLowerCase()\n            .replace(/[^\\w ]+/g,'')\n            .replace(/ +/g,'_');\n    }\n\n    useEffect(() => {\n        const condDefault = 'cases';\n        var url1 = axios.get(\"https://raw.githubusercontent.com/BiKunTin/datastore/main/us-counties.topojson\");\n        Promise\n            .all([url1])\n            .then((usa) => {\n                setus(us => usa[0].data);\n            });\n        setcheck(check => true);\n\n    }, []);\n    useEffect(() => {\n        if(date){\n            console.log(date);\n            let datas;\n            let data3;\n            async function updatedata() {\n                // if (date < moment(test1.current).format('YYYY-MM-DD'))\n                datas = await fetchUSByDate(date);\n                data3 = await fetchAllStatesByDate(date);\n                setMapData(data3);\n                setData2(data2 => datas);\n                setccases(ccases => datas.stats[0].cases);\n                setcdeath(cdeath => datas.stats[0].deaths);\n                setcnewc(cnewc => datas.stats[0].newCases);\n                setchos(chos => datas.stats[0].hospitalized);\n                setcvac(cvac => datas.stats[0].secondDose);\n            }\n            updatedata();\n        }\n    },[date]);\n\n    useEffect(() => {\n        const svg = d3.select(myRef.current);\n        if (us && myRef.current && date && statedata && cond) {\n            setcheck1(false);\n            setcheck2(false);\n            for (var i = 1; i < 100; i++) {\n                svg.select(\"g\").remove();\n            }\n\n            let width = 960 - margin.left - margin.right;\n            let height = 600 - margin.left - margin.right;\n            svg.append('svg')\n                .attr('class', 'center-container')\n                .attr('height', height + margin.top + margin.bottom)\n                .attr('width', width + margin.left + margin.right);\n\n\n            svg.append('rect')\n                .attr('class', 'background center-container')\n                .attr('height', height + margin.top + margin.bottom)\n                .attr('width', width + margin.left + margin.right)\n                .on('click', clicked);\n\n            const projection = d3.geoAlbersUsa()\n                .translate([width / 2, height / 2])\n                .scale(width);\n\n            const path = d3.geoPath()\n                .projection(projection);\n            const g = svg.append(\"g\")\n                .attr('class', 'center-container center-items us-state')\n                .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n                .attr('width', width + margin.left + margin.right)\n                .attr('height', height + margin.top + margin.bottom);\n            counties = topojson.feature(us, us.objects.counties).features;\n            states = topojson.feature(us, us.objects.states).features;\n            states.forEach(function (f) {\n                f.props = statedata.states.find(function (d) {\n                    return d.fips * 1000 / 1000 === f.id\n                })\n\n            })\n            g.append(\"g\")\n                .selectAll(\"path\")\n                .data(counties)\n                .enter().append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"county-boundary\")\n                .attr(\"id\", function (d) { // set id to lowercase county name eg. \"bexar_county\"\n                    if (d.props) {\n                        return convertToSlug(d.props.name.toLowerCase());\n                    } else return \"\";\n                })\n                .on(\"click\", function(d)\n                {\n                    setsname(d.props.name);\n                    setCounty(d.props.name);\n                    setccases(ccases => d.props.stats[0].cases);\n                    setcdeath(cdeath => d.props.stats[0].deaths);\n                    setcnewc(cnewc => d.props.stats[0].newCases);\n                    setchos(chos => d.props.stats[0].hospitalized);\n                    setcvac(cvac => d.props.stats[0].secondDose);\n                })\n                .on(\"contexmenu\",reset)\n                .on(\"mouseover\", function (d) {\n                    countytip.show(d, this);\n                })\n                .on(\"mouseout\", function (d) {\n                    countytip.hide(d, this);\n                });\n            if (cond === 'cases') {\n                stateDomain = stateValues(statedata, 'casesPercent');\n                setColor({\n                    color0: blues[0],\n                    color1: blues[1],\n                    color2: blues[2],\n                    color3: blues[3],\n                    color4: blues[4]\n                });\n                stateColor = d3.scaleThreshold()\n                    .domain(stateDomain)\n                    .range(blues);\n            } else if (cond === 'newcases') {\n                stateDomain = stateValues(statedata, 'newCasesPercent');\n                setColor({\n                    color0: greens[0],\n                    color1: greens[1],\n                    color2: greens[2],\n                    color3: greens[3],\n                    color4: greens[4]\n                });\n                stateColor = d3.scaleThreshold()\n                    .domain(stateDomain)\n                    .range(greens);\n            } else if (cond === 'deaths') {\n                stateDomain = stateValues(statedata, 'deathsPercent');\n                setColor({\n                    color0: reds[0],\n                    color1: reds[1],\n                    color2: reds[2],\n                    color3: reds[3],\n                    color4: reds[4]\n                });\n                console.log(stateDomain);\n                console.log(reds);\n                stateColor = d3.scaleThreshold()\n                    .domain(stateDomain)\n                    .range(reds);\n            } else if (cond === 'hospitalizations') {\n                stateDomain = stateValues(statedata, 'hospitalizedPercent');\n                setColor({\n                    color0: purples[0],\n                    color1: purples[1],\n                    color2: purples[2],\n                    color3: purples[3],\n                    color4: purples[4]\n                });\n                console.log(stateDomain);\n                stateColor = d3.scaleThreshold()\n                    .domain(stateDomain)\n                    .range(purples);\n            } else if (cond === 'vaccinations') {\n                stateDomain = stateValues(statedata, 'secondDosePercent');\n                setColor({\n                    color0: pinks[0],\n                    color1: pinks[1],\n                    color2: pinks[2],\n                    color3: pinks[3],\n                    color4: pinks[4]\n                });\n                console.log(stateDomain);\n                console.log(pinks);\n                stateColor = d3.scaleThreshold()\n                    .domain(stateDomain)\n                    .range(pinks);\n            }\n            setDomain({\n                domain0: stateDomain[0].toFixed(2) + \"%\",\n                domain1: stateDomain[1].toFixed(2) + \"%\",\n                domain2: stateDomain[2].toFixed(2) + \"%\",\n                domain3: stateDomain[3].toFixed(2) + \"%\",\n                domain4: stateDomain[4].toFixed(2) + \"%\"\n            });\n            g.append(\"g\")\n                .attr(\"id\", \"states\")\n                .selectAll(\"path\")\n                .data(states)\n                .enter().append(\"path\")\n                .style('fill', function (d) {\n                    if (d.props && cond === 'cases') {\n                        return stateColor(d.props.stats[0].casesPercent);\n                    } else if (d.props && cond === 'newcases') {\n                        return stateColor(d.props.stats[0].newCasesPercent);\n                    } else if (d.props && cond === 'deaths') {\n                        return stateColor(d.props.stats[0].deathsPercent);\n                    } else if (d.props && cond === 'vaccinations') {\n                        return stateColor(d.props.stats[0].secondDosePercent);\n                    } else if (d.props && cond === 'hospitalizations') {\n                        return stateColor(d.props.stats[0].hospitalizedPercent);\n                    } else {\n                        return \"black\";\n                    }\n                })\n                .attr(\"d\", path)\n                .attr(\"id\", function (d) { // set id to lowercase state name eg. \"texas\"\n                    if (d.props) {\n                        return d.props.name.toLowerCase();\n                    } else return \"\";\n                })\n                .attr(\"class\", \"state\")\n                .on(\"click\", clicked)\n                .on(\"mouseover\", function (d) {\n                    statetip.show(d, this);\n                })\n                .on(\"mouseout\", function (d) {\n                    statetip.hide(d, this);\n                });\n            g.append(\"path\")\n                .datum(topojson.mesh(us, us.objects.states, function (a, b) {\n                    return a !== b;\n                }))\n                .attr(\"id\", \"state-borders\")\n                .attr(\"d\", path);\n\n\n            const statetip = d3tip()\n                .attr('class', 'd3-tip')\n                .offset([140, 140])\n                .html(function (d) {\n                    if (cond === 'cases' && d.props) {\n                        return \"<div style='opacity:0.8;background-color:#329c68;font-family:sans-serif;padding:8px;;color:white'>\" +\n                            \"State: \" + d.props.name + \"<br/>\" +\n                            \"Cases: \" + d.props.stats[0].cases + \"<br/>\" +\n                            \"Percent of State: \" + d.props.stats[0].casesPercent.toFixed(2) + \"%<br/>\" +\n                            \"</div>\";\n                    } else if (cond === 'newcases' && d.props) {\n                        return \"<div style='opacity:0.8;background-color:#329c68;font-family:sans-serif;padding:8px;;color:white'>\" +\n                            \"State: \" + d.props.name + \"<br/>\" +\n                            \"New Cases: \" + d.props.stats[0].newCases + \"<br/>\" +\n                            \"Percent of State: \" + d.props.stats[0].newCasesPercent.toFixed(2) + \"%<br/>\" +\n                            \"</div>\";\n                    } else if (cond === 'deaths' && d.props) {\n                        return \"<div style='opacity:0.8;background-color:#329c68;font-family:sans-serif;padding:8px;;color:white'>\" +\n                            \"State: \" + d.props.name + \"<br/>\" +\n                            \"Deaths: \" + d.props.stats[0].deaths + \"<br/>\" +\n                            \"Percent of State: \" + d.props.stats[0].deathsPercent.toFixed(2) + \"%<br/>\" +\n                            \"</div>\";\n                    } else if (cond === 'vaccinations' && d.props) {\n                        return \"<div style='opacity:0.8;background-color:#329c68;font-family:sans-serif;padding:8px;;color:white'>\" +\n                            \"State: \" + d.props.name + \"<br/>\" +\n                            \"Daily Vaccinations: \" + d.props.stats[0].dailyVaccinated + \"<br/>\" +\n                            \"Percent of State Vaccinated: \" + d.props.stats[0].secondDosePercent.toFixed(2) + \"%<br/>\" +\n                            \"</div>\";\n                    } else if (cond === 'hospitalizations' && d.props) {\n                        return \"<div style='opacity:0.8;background-color:#329c68;font-family:sans-serif;padding:8px;;color:white'>\" +\n                            \"State: \" + d.props.name + \"<br/>\" +\n                            \"Hospitalized: \" + d.props.stats[0].hospitalized + \"<br/>\" +\n                            \"Percent of State: \" + d.props.stats[0].hospitalizedPercent.toFixed(2) + \"%<br/>\" +\n                            \"</div>\";\n                    } else {\n                        return \"<div style='opacity:0.8;background-color:#329c68;font-family:sans-serif;padding:8px;;color:white'>\" +\n                            \"State: \" + d.id + \"<br/>\" +\n                            \"Cases: \" + 0 + \"<br/>\" +\n                            \"</div>\";\n                    }\n                });\n            g.call(statetip);\n            const countytip = d3tip()\n                .attr('class', 'd3-tip')\n                .offset([140, 140])\n                .html(function (d) {\n                    if (cond === 'cases' && d.props) {\n                        setColor({\n                            color0: blues[0],\n                            color1: blues[1],\n                            color2: blues[2],\n                            color3: blues[3],\n                            color4: blues[4]\n                        });\n                        setDomain({\n                            domain0: countyCaseDomain[0].toFixed(2) + \"%\",\n                            domain1: countyCaseDomain[1].toFixed(2) + \"%\",\n                            domain2: countyCaseDomain[2].toFixed(2) + \"%\",\n                            domain3: countyCaseDomain[3].toFixed(2) + \"%\",\n                            domain4: countyCaseDomain[4].toFixed(2) + \"%\"\n                        });\n                        g.selectAll(\"path\")\n                            .style('fill', function (d) {\n                                if (d.props && parseInt(d.id / 1000) === curstate) {\n                                    return countyColorCases(d.props.stats[0].casesPercent)\n                                }\n                            })\n                        return \"<div style='opacity:0.8;background-color:#329c68;font-family:sans-serif;padding:8px;;color:white'>\" +\n                            \"County: \" + d.props.name + \"<br/>\" +\n                            \"Cases: \" + d.props.stats[0].cases + \"<br/>\" +\n                            \"Percent of County: \" + d.props.stats[0].casesPercent.toFixed(2) + \"%<br/>\" +\n                            \"</div>\";\n                    } else if (cond === 'newcases' && d.props) {\n                        setColor({\n                            color0: greens[0],\n                            color1: greens[1],\n                            color2: greens[2],\n                            color3: greens[3],\n                            color4: greens[4]\n                        });\n                        setDomain({\n                            domain0: countyNewDomain[0].toFixed(2) + \"%\",\n                            domain1: countyNewDomain[1].toFixed(2) + \"%\",\n                            domain2: countyNewDomain[2].toFixed(2) + \"%\",\n                            domain3: countyNewDomain[3].toFixed(2) + \"%\",\n                            domain4: countyNewDomain[4].toFixed(2) + \"%\"\n                        });\n                        g.selectAll(\"path\")\n                            .style('fill', function (d) {\n                                if (d.props && parseInt(d.id / 1000) === curstate) {\n                                    return countyColorRecovered(d.props.stats[0].newCasesPercent)\n                                }\n                            })\n                        return \"<div style='opacity:0.8;background-color:#329c68;font-family:sans-serif;padding:8px;;color:white'>\" +\n                            \"County: \" + d.props.name + \"<br/>\" +\n                            \"New Cases: \" + d.props.stats[0].newCases + \"<br/>\" +\n                            \"Percent of County: \" + d.props.stats[0].newCasesPercent.toFixed(2) + \"%<br/>\" +\n                            \"</div>\";\n                    } else if (cond === 'deaths' && d.props) {\n                        setColor({\n                            color0: reds[0],\n                            color1: reds[1],\n                            color2: reds[2],\n                            color3: reds[3],\n                            color4: reds[4]\n                        });\n                        setDomain({\n                            domain0: countyDeathDomain[0].toFixed(2) + \"%\",\n                            domain1: countyDeathDomain[1].toFixed(2) + \"%\",\n                            domain2: countyDeathDomain[2].toFixed(2) + \"%\",\n                            domain3: countyDeathDomain[3].toFixed(2) + \"%\",\n                            domain4: countyDeathDomain[4].toFixed(2) + \"%\"\n                        });\n                        g.selectAll(\"path\")\n                            .style('fill', function (d) {\n                                if (d.props && parseInt(d.id / 1000) === curstate) {\n                                    return countyColorDeaths(d.props.stats[0].deathsPercent)\n                                }\n                            })\n                        return \"<div style='opacity:0.8;background-color:#329c68;font-family:sans-serif;padding:8px;;color:white'>\" +\n                            \"County: \" + d.props.name + \"<br/>\" +\n                            \"Death: \" + d.props.stats[0].deaths + \"<br/>\" +\n                            \"Percent of County: \" + d.props.stats[0].deathsPercent.toFixed(2) + \"%<br/>\" +\n                            \"</div>\";\n                    } else if (cond === 'vaccinations' && d.props) {\n                        setDomain(null);\n                        setColor(null);\n                        g.selectAll(\"path\")\n                            .style('fill', function (d) {\n                                if (d.props && parseInt(d.id / 1000) === curstate) {\n                                    return countyColorVac(d.props.stats[0].peopleVaccinated)\n                                }\n                            })\n                        return \"<div style='opacity:0.8;background-color:#329c68;font-family:sans-serif;padding:8px;;color:white'>\" +\n                            \"County: \" + d.props.name + \"<br/>\" +\n                            \"No County Vaccination Data\" +\n                            \"</div>\";\n                    } else if (cond === 'hospitalizations' && d.props) {\n                        setDomain(null);\n                        setColor(null);\n                        g.selectAll(\"path\")\n                            .style('fill', function (d) {\n                                if (d.props && parseInt(d.id / 1000) === curstate) {\n                                    return countyColorHosp(d.props.stats[0].hospitalized)\n                                }\n                            })\n                        return \"<div style='opacity:0.8;background-color:#329c68;font-family:sans-serif;padding:8px;;color:white'>\" +\n                            \"County: \" + d.props.name + \"<br/>\" +\n                            \"No County Hospitalization Data\" +\n                            \"</div>\";\n                    } else {\n                        return \"<div style='opacity:0.8;background-color:#329c68;font-family:sans-serif;padding:8px;;color:white'>\" +\n                            \"County: \" + d.id + \"<br/>\" +\n                            \"Cases: \" + 0 + \"<br/>\" +\n                            \"</div>\";\n                    }\n                });\n            g.call(countytip);\n\n            function clicked(d) {\n                setcheck1(check1 => true);\n                if (typeof d !== \"undefined\") {\n                    setccases(ccases => d.props.stats[0].cases);\n                    setcdeath(cdeath => d.props.stats[0].deaths);\n                    setcnewc(cnewc => d.props.stats[0].newCases);\n                    setchos(chos => d.props.stats[0].hospitalized);\n                    setcvac(cvac => d.props.stats[0].secondDose);\n                    setsname(sname => d.props.name);\n                    setsnamestate(snamestate=> d.props.name);\n\n                    setState(state => d.props.name);\n\n                    async function updatedata() {\n                        county = await fetchCountyByDate(d.props.name, date);\n                        counties.forEach(function (f) {\n                            // ////console.log(parseInt(f.id/1000));\n                            curstate = parseInt(d.id)\n                            if (parseInt(f.id / 1000) === d.id * 1000 / 1000) {\n                                ////console.log(county);\n                                f.props = county.state.counties.find(function (e) {\n                                    // ////console.log(e.fips + \"@@\" + f.id);\n                                    return e.fips * 1000 / 1000 === f.id\n                                })\n                            }\n                        })\n                        countyCaseDomain = countyValues(county, 'casesPercent');\n                        countyColorCases = d3.scaleThreshold()\n                            .domain(countyCaseDomain)\n                            .range(blues);\n                        countyDeathDomain = countyValues(county, 'deathsPercent');\n                        countyColorDeaths = d3.scaleThreshold()\n                            .domain(countyDeathDomain)\n                            .range(reds);\n                        countyNewDomain = countyValues(county, 'newCasesPercent');\n                        countyColorRecovered = d3.scaleThreshold()\n                            .domain(countyNewDomain)\n                            .range(greens);\n                    }\n\n                    updatedata();\n\n\n                    // tip.show(d);\n                    // ////console.log(\"ok\");\n                    if (d3.select('.background').node() === this) return reset();\n\n                    if (active.node() === this) return reset();\n\n                    active.classed(\"active\", false);\n                    active = d3.select(this).classed(\"active\", true);\n\n                    var bounds = path.bounds(d),\n                        dx = bounds[1][0] - bounds[0][0],\n                        dy = bounds[1][1] - bounds[0][1],\n                        x = (bounds[0][0] + bounds[1][0]) / 2,\n                        y = (bounds[0][1] + bounds[1][1]) / 2,\n                        scale = .9 / Math.max(dx / width, dy / height),\n                        translate = [width / 2 - scale * x, height / 2 - scale * y];\n\n                    g.transition()\n                        .duration(800)\n                        .style(\"stroke-width\", 1.5 / scale + \"px\")\n                        .attr(\"transform\", \"translate(\" + translate + \")scale(\" + scale + \")\");\n                }\n            }\n\n            function reset() {\n                async function updatedata() {\n                    setCounty(null);\n                    setccases(ccases => data2.stats[0].cases);\n                    setcdeath(cdeath => data2.stats[0].deaths);\n                    setcnewc(cnewc => data2.stats[0].newCases);\n                    setchos(chos => data2.stats[0].hospitalized);\n                    setcvac(cvac => data2.stats[0].secondDose);\n                    setsname(sname => \"USA\");\n                    setState(state => \"USA\");\n                    setcheck1(check1 => false);\n                    setcheck2(check2 => false);\n                    setsnamestate(snamestate=>null);\n                    if (cond === 'cases')\n                        stateDomain = stateValues(statedata, 'casesPercent');\n                    if (cond === 'newcases')\n                        stateDomain = stateValues(statedata, 'newCasesPercent');\n                    if (cond === 'deaths')\n                        stateDomain = stateValues(statedata, 'deathsPercent');\n                    if (cond === 'vaccinations')\n                        stateDomain = stateValues(statedata, 'secondDosePercent');\n                    if (cond === 'hospitalizations')\n                        stateDomain = stateValues(statedata, 'hospitalizedPercent');\n                    setDomain({\n                        domain0: stateDomain[0].toFixed(2) + \"%\",\n                        domain1: stateDomain[1].toFixed(2) + \"%\",\n                        domain2: stateDomain[2].toFixed(2) + \"%\",\n                        domain3: stateDomain[3].toFixed(2) + \"%\",\n                        domain4: stateDomain[4].toFixed(2) + \"%\"\n                    });\n                }\n\n                updatedata();\n                active.classed(\"active\", false);\n                active = d3.select(null);\n\n                g.transition()\n                    .delay(100)\n                    .duration(800)\n                    .style(\"stroke-width\", \"1.5px\")\n                    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n                g.selectAll(\"path\")\n                    .style('fill', function (d) {\n                        if (d.props && cond === 'cases') {\n\n                            return stateColor(d.props.stats[0].casesPercent);\n                        } else if (d.props && cond === 'newcases') {\n                            return stateColor(d.props.stats[0].newCasesPercent);\n                        } else if (d.props && cond === 'deaths') {\n                            return stateColor(d.props.stats[0].deathsPercent);\n                        } else if (d.props && cond === 'vaccinations') {\n                            return stateColor(d.props.stats[0].secondDosePercent);\n                        } else if (d.props && cond === 'hospitalizations') {\n                            return stateColor(d.props.stats[0].hospitalizedPercent);\n                        }\n                    })\n            }\n            window.oncontextmenu = function () {\n                reset();\n                return false;\n            }\n        }\n        d3.select('svg').select('g').exit().remove();\n    }, [us, myRef.current, cond, date,statedata]);\n    if (!statedata) {\n        return (\n            <div>Loading...</div>\n        );\n    }\n    return (\n        <div>\n            <Grid container spacing={1} justify=\"center\">\n                <CardComponent\n                    className={stylescard.infected}\n                    cardTitle= {sname + \" cases\"}\n                    value={ccases}\n                    cardSubtitle=\"Total number of active cases\"\n                    //           buttonTitle=\"Infected\"\n                    //           buttFunction= { (cond) => buttClickInfected() }\n                />\n                <CardComponent\n                    className={stylescard.recovered}\n                    cardTitle= {sname + \" new cases\"}\n                    value={cnewc}\n                />\n                <CardComponent\n                    className={stylescard.deaths}\n                    cardTitle= {sname + \" death\"}\n                    value={cdeath}\n                />\n                {cvac!=0 ?\n                    <CardComponent\n                        className={stylescard.vaccinated}\n                        cardTitle= {sname + \" vaccinated\"}\n                        value={cvac}\n                    />:null}\n                {chos!=0 ?\n                    <CardComponent\n                        className={stylescard.hospitalized}\n                        cardTitle= {sname + \" hospitalized\"}\n                        value={chos}\n                    />\n                    :null}\n            </Grid>\n            <br/>\n            <div className={styles.container}>\n                <Grid container spacing={1}>\n                    <Grid item xs={3}>\n                        {/* {data && date && <Chart nbdate={date} data={data} country=\"US\" cond={cond} />} */}\n                        {check2 ?\n                            <Chart nbdate={date} sname={sname} country={state} countyName={countyName} cond={cond} width={\"30vh\"} height={\"20vh\"}/> : null}\n                    </Grid>\n                    <Grid item xs={6}>\n                        <div className=\"container\">\n                            <div className=\"bloc-tabs\">\n                                <button\n                                    className={toggleState === 1 ? \"tabs active-tabs\" : \"tabs\"}\n                                    onClick={() => toggleTab(1)}\n                                >\n                                    Maps\n                                </button>\n                                {!check1 ? <button\n                                    className={toggleState === 2 ? \"tabs active-tabs\" : \"tabs\"}\n                                    onClick={() => toggleTab(2)}\n                                >\n                                    USA Chart\n                                </button>:null}\n                            </div>\n                            <div className=\"content-tabs\">\n                                <div className={toggleState === 1 ? \"content  active-content\" : \"content\"}>\n                                    <Grid container spacing={6}>\n                                        <Grid item xs={6}>\n                                            <div className={styles.details}>\n                                                {check1 ?\n                                                    <button className={styles.button1} onClick={activatelayer}> Get Details </button> : null}\n                                            </div>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            {color && domain ?\n                                                <div className={styles.legend}>\n                                                    <div className={styles.mylegend}>\n                                                    <div className={styles.legendtitle}>Percent of Population</div>\n                                                        <div className={styles.legendscale}>\n                                                            <ul className={styles.legendlabels}>\n                                                                <li><span style={{background: color.color0}}></span>{domain.domain0}</li>\n                                                                <li><span style={{background: color.color1}}></span>{domain.domain1}</li>\n                                                                <li><span style={{background: color.color2}}></span>{domain.domain2}</li>\n                                                                <li><span style={{background: color.color3}}></span>{domain.domain3}</li>\n                                                                <li><span style={{background: color.color4}}></span>{domain.domain4}</li>\n                                                            </ul>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                : null }\n                                        </Grid>\n                                    </Grid>\n                                    {/*<div className={styles.maps}>*/}\n                                        <svg\n                                            className=\"d3-component\"\n                                            width={window.innerWidth/2.5}\n                                            height={window.innerHeight/1.5}\n                                            ref={myRef}\n                                        />\n                                    {/*</div>*/}\n                                </div>\n\n                                {!check1 ? <div\n                                    className={toggleState === 2 ? \"content  active-content\" : \"content\"}\n                                >\n                                    {!check1 ?\n                                        // <div className={styles.maps}>\n                                        <Chart nbdate={date} sname={sname} country={state} countyName={countyName} cond={cond} width={\"20vh\"} height={\"10vh\"}/>\n                                        : null}\n                                </div> :null}\n                            </div>\n                        </div>\n                    </Grid>\n                    <Grid item xs={3}>\n                        {check2 ? <Infos nbdate={date} sname={sname} snamestate={snamestate}/> : null}\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    );\n}\n\nexport default USMaps;\n","import React, { useEffect, useState } from 'react';\nimport { Info, Chart, USMap, News, Infos } from '..';\nimport range from 'lodash/range';\nimport { getMonth, getYear } from 'date-fns';\nimport '../../App.css';\nimport DatePicker from 'react-datepicker';\nimport moment from 'moment';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport addDays from 'add-days';\nimport { Grid } from '@material-ui/core';\nimport SearchPage from '../SearchBar/SearchPage.js';\nimport { fetchAllStatesByDate, fetchData, fetchUSByDate } from '../../api';\nimport styles from '../../App.module.css';\n\nconst Combine = () => {\n  const [data, setData] = useState(null);\n  const [statedata, setMapData] = useState(null);\n  const [startDate, setStartDate] = useState(addDays(new Date(), -1));\n  const years = range(1990, getYear(new Date()) + 1, 1);\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n  const [test, settest] = useState(new Date());\n  const currentDate = new Date(moment(startDate).format('YYYY-MM-DD'));\n  const [cond, setCond] = useState(null);\n  const march7 = new Date('2021-03-07');\n  const jan21 = new Date('2020-01-22');\n  let premarch7 = true;\n  if (Date.parse(march7) < Date.parse(currentDate)) {\n    premarch7 = false;\n  }\n  const Jan12 = new Date('2021-01-11');\n  let prejan12 = false;\n  if (Date.parse(Jan12) < Date.parse(currentDate)) {\n    prejan12 = true;\n  }\n  useEffect(() => {\n    // //console.log(today);\n    settest((test) => test.setDate(test.getDate() - 1));\n    setCond((cond) => 'cases');\n  }, []);\n\n  return (\n    <div>\n      {/* <div className={styles.container}> */}\n      <Grid container spacing={1}>\n        <Grid item xs={3}>\n          <div className={styles.search}>\n            <div><SearchPage cond={cond} setCond={setCond} /></div>\n          </div>\n        </Grid>\n        <Grid item xs={6}>\n          {/* <Grid> */}\n          {/*    */}\n          {/* </Grid> */}\n          <div className={styles.btnContainer}>\n            {/*    <div> */}\n            {/* <Grid xs={2}> */}\n            <div>\n\n              <button className={`${styles.skewBtn} ${styles.blue}`} onClick={() => setCond('cases')}> Cases</button>\n              {/* </Grid> */}\n              {/* <Grid xs={2}> */}\n              <button className={`${styles.skewBtn} ${styles.green}`} onClick={() => setCond('newcases')}> New Cases</button>\n              {/* </Grid> */}\n              {/* <Grid xs={2}> */}\n              <button className={`${styles.skewBtn} ${styles.red}`} onClick={() => setCond('deaths')}> Deaths</button>\n              {/* </Grid> */}\n              {/* <Grid xs={2}> */}\n              {prejan12 ? <button className={`${styles.skewBtn} ${styles.pink}`} onClick={() => setCond('vaccinations')}> Vaccinations</button> : 'Vaccinations*'}\n              {/* </Grid> */}\n              {/* <Grid xs={2}> */}\n              {premarch7 ? (\n                <button className={`${styles.skewBtn} ${styles.purple}`} onClick={() => setCond('hospitalizations')}> Hospitalizations\n                </button>\n              ) : 'Hospitalizations*'}\n              {/* </Grid> */}\n\n            </div>\n          </div>\n        </Grid>\n        <Grid item xs={3}>\n          <div className={styles.date}>\n            <p> Change date: <DatePicker\n              renderCustomHeader={({\n                date,\n                changeYear,\n                changeMonth,\n                decreaseMonth,\n                increaseMonth,\n                prevMonthButtonDisabled,\n                nextMonthButtonDisabled,\n              }) => (\n                <div\n                  style={{\n                      margin: 10,\n                      display: 'flex',\n                      justifyContent: 'center',\n                    }}\n                >\n                  <button onClick={decreaseMonth} disabled={prevMonthButtonDisabled}>\n                      {'<'}\n                    </button>\n                  <select\n                      value={getYear(date)}\n                      onChange={({ target: { value } }) => changeYear(value)}\n                    >\n                      {years.map((option) => (\n                          <option key={option} value={option}>\n                              {option}\n                            </option>\n                        ))}\n                    </select>\n\n                  <select\n                      value={months[getMonth(date)]}\n                      onChange={({ target: { value } }) => changeMonth(months.indexOf(value))}\n                    >\n                      {months.map((option) => (\n                          <option key={option} value={option}>\n                              {option}\n                            </option>\n                        ))}\n                    </select>\n\n                  <button onClick={increaseMonth} disabled={nextMonthButtonDisabled}>\n                      {'>'}\n                    </button>\n                </div>\n              )}\n              selected={startDate}\n              onChange={(date) => setStartDate(date)}\n              maxDate={addDays(new Date(), -1)}\n              minDate={jan21}\n            />\n            </p>\n          </div>\n        </Grid>\n\n      </Grid>\n      <br />\n      {/* </div> */}\n      <USMap date={moment(startDate).format('YYYY-MM-DD')} cond={cond} witdh = \"80vh\" height = \"40vh\"/>\n    </div>\n  );\n};\nexport default Combine;\n","import React from \"react\";\nimport \"./Nav.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Nav = () => {\n    return (\n        <nav>\n            <Link style={{ color: \"white\", textDecoration: \"none\" }} to=\"/\">\n                <div style={{ fontSize: \"20px\" }}>Covid Tracker</div>\n            </Link>\n            <ul className=\"nav-links\">\n                <Link\n                    style={{\n                        color: \"white\",\n                        textDecoration: \"none\",\n                        marginTop: \"5px\",\n                        marginRight: \"40px\",\n                        fontSize: \"15px\"\n                    }}\n                    to=\"/infos\"\n                >\n                    <li>Infos</li>\n                </Link>\n                <Link\n                    style={{\n                        color: \"white\",\n                        textDecoration: \"none\",\n                        marginTop: \"5px\",\n                        marginRight: \"40px\",\n                        fontSize: \"15px\"\n                    }}\n                    to=\"/symptom\"\n                >\n                    <li>Symptom</li>\n                </Link>\n                <Link\n                    style={{\n                        color: \"white\",\n                        textDecoration: \"none\",\n                        marginTop: \"5px\",\n                        marginRight: \"40px\",\n                        fontSize: \"15px\"\n                    }}\n                    to=\"/vaccine\"\n                >\n                    <li>Vaccine</li>\n                </Link>\n                <Link\n                    style={{ color: \"white\", textDecoration: \"none\", marginTop: \"5px\",fontSize: \"15px\" }}\n                    to=\"/about\"\n                >\n                    <li>About</li>\n                </Link>\n            </ul>\n        </nav>\n    );\n}\n\nexport default Nav;\n","import React from 'react';\nimport './newsitem.css';\n\nconst NewsItem = ({ title, description, url, urlToImage }) =>\n{\n    return (\n        <div className=\"news-item\">\n            <img className=\"news-img\" src={urlToImage} alt=\"New image\"/>\n            <h3>\n                <a href={url}>{title}</a>\n            </h3>\n            <p>{description}</p>\n        </div>\n    )\n}\n\nexport default NewsItem;\n","import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport NewsItem from './NewsItem';\nimport {Line} from \"react-chartjs-2\";\n\nconst News = ({nbdate,sname,snamestate}) => {\n  const [articles, setArticles] = useState([]);\n\n  useEffect(() => {\n    const getArticles = async () => {\n      const res = await Axios.get(\n          `https://newsapi.org/v2/everything?qInTitle=+Covid+in+${sname}&to=${nbdate}&language=en&sortBy=relevancy&pageSize=10&apiKey=76d09548beaa47da9b51c96964e3354c`,\n      );\n\n      setArticles(res.data.articles);\n      console.log(res);\n    };\n\n    getArticles();\n  }, [nbdate,sname]);\n\n  return (\n      <div>\n        {articles.map(({ title, description, url, urlToImage }) => (\n            <NewsItem\n                title={title}\n                description={description}\n                url={url}\n                urlToImage={urlToImage}\n            />\n        ))}\n      </div>\n  );\n};\n\nexport default News;","import React from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport Sticky from 'react-sticky-el';\nimport { News } from '../index';\nconst Infos = ( {nbdate,sname, snamestate} ) => (\n    <div style={{ margin: '20px' }}>\n      <Tabs>\n        <TabList>\n          <Tab>News</Tab>\n        </TabList>\n        <TabPanel>\n          <p>\n            <div className=\"scrollarea\" style={{height: '500px', width: '400px', overflow: 'scroll'}}>\n              <Sticky scrollElement=\".scrollbar\">\n                <h1>\n                  <News nbdate={nbdate} sname={sname} />\n                </h1>\n              </Sticky>\n            </div>\n          </p>\n        </TabPanel>\n      </Tabs>\n    </div>\n);\nexport default Infos;","import React from 'react';\nimport {Combine} from '../components';\nimport styles from \"../App.module.css\";\nconst home = () => {\n    return (\n        <div>\n            <Combine />\n        </div>\n    )\n}\nexport default home;","import React from \"react\";\nimport { Combine } from \"../components\";\nimport styles from \"../App.module.css\";\nconst details = ({ state: { id, name, color } }) => {\n    return ( <\n        div className = { styles.container } >\n        <\n        p > { id } < /p>\n\n        <\n        /div>\n    );\n};\nexport default details;","import React from 'react';\nimport '../App.css';\nimport Spread from '../img/spread.png';\nimport cuong from '../img/cuong.png';\nimport zach from '../img/zach.png';\nimport nick from '../img/nick.png';\nimport joe from '../img/joe.png';\nimport damon from '../img/damon.png';\nimport {Grid} from \"@material-ui/core\";\n\nconst About = () => (\n  <div\n    style={{\n      backgroundColor: 'white',\n      textAlign: 'center',\n    }}\n  >\n    <br />\n      <h2>About us</h2>\n      <br/>\n      <Grid container spacing={1}>\n          <Grid item xs={1}>\n              <p/>\n          </Grid>\n          <Grid item xs={2}>\n              <img src={cuong} style={{ height: 250, width: 250 }} />\n              <p> Cuong Nguyen </p>\n          </Grid>\n          <Grid item xs={2}>\n              <img src={zach} style={{ height: 250, width: 250 }} />\n              <p> Zach Macadam </p>\n          </Grid>\n          <Grid item xs={2}>\n              <img src={nick} style={{ height: 250, width: 250 }} />\n              <p> Nicholas Bell </p>\n          </Grid>\n          <Grid item xs={2}>\n              <img src={damon} style={{ height: 250, width: 250 }} />\n              <p> Damon Ramirez </p>\n          </Grid>\n          <Grid item xs={2}>\n              <img src={joe} style={{ height: 250, width: 250 }} />\n              <p> Joe Donoghue </p>\n          </Grid>\n      </Grid>\n      <br/>\n      <br/>\n    <div\n      style={{\n        padding: '20px',\n        backgroundColor: 'grey',\n        color: 'white',\n        margin: '20px',\n        borderRadius: '20px',\n      }}\n    >\n      <h4>We are Covid Tracker Team</h4>\n      <div style={{ fontSize: '20px' }}>\n        Our team aims to support users in the United States by providing accurate and timely information regarding COVID-19. We understand this issue concerns everybody in the US right now, and that’s why our primary goal is to create software that emphasizes user-friendliness and reliability. Information this important needs to be accessible for all, and that knowledge allows us to make wiser decisions. To achieve this, our software features a web dashboard which displays an interactive map of the US, along with supplementary analysis and additional news.\n      </div>\n      <br />\n      <h4>Want to know more about us?</h4>\n      <div style={{ fontSize: '20px' }}>\n        {' '}\n        <a\n          href=\"http://riogrande.cs.tcu.edu/2021CovidTracker/\"\n          target=\"_blank\"\n        >\n          Click here\n        </a>{' '}\n      </div>\n      <br />\n    </div>\n  </div>\n);\n\nexport default About;\n","import React from \"react\";\nimport \"../App.css\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nimport CleanHand from \"../img/bob_covid_large.jpg\";\nimport Distance from \"../img/social-distancing-together-6-feet.webp\";\nimport Doctor from \"../img/cartoon.jpg\";\nimport Spread from \"../img/spread.png\";\nimport Touch from \"../img/touch.jpg\";\nimport Cover from \"../img/Coronavirus-EN-2.png\";\nimport Stayhome from \"../img/download.jfif\";\nimport Call from \"../img/original.jfif\";\nimport Support from \"../img/be-kind-to-support.jpg\";\nimport {Grid} from \"@material-ui/core\";\nimport styles from '../App.module.css';\nconst Symptom = () => {\n  return (\n    <div style={{ margin: \"20px\" }}>\n      <Tabs>\n        <TabList>\n          <Tab><strong>Overview</strong></Tab>\n          <Tab><strong>Symptoms</strong></Tab>\n          <Tab><strong>Prevention</strong></Tab>\n          <Tab><strong>Treatments</strong></Tab>\n        </TabList>\n\n        <TabPanel>\n          <p>\n            A coronavirus identified in 2019, SARS-CoV-2, has caused a pandemic of respiratory illness, called COVID-19.\n          </p>\n          <p>\n            Most people who become ill from COVID-19 will experience mild to\n            moderate symptoms and recover without special treatment.\n          </p>\n          <br/>\n          <hr />\n          <br/>\n          <p>HOW IT SPREADS</p>\n          <p>\n            The virus that causes COVID-19 is mainly transmitted through\n            droplets generated when an infected person coughs, sneezes, or\n            exhales. These droplets are too heavy to hang in the air, and\n            quickly fall on floors or surfaces.\n          </p>\n          <p>\n            You can be infected by breathing in the virus if you are within\n            close proximity of someone who has COVID-19, or by touching a\n            contaminated surface and then your eyes, nose or mouth.\n          </p>\n          <br/>\n          <img src={Spread} style={{ height: 350 }} />\n        </TabPanel>\n        <TabPanel>\n          <p>\n            COVID-19 affects different people in different ways. Most infected\n            people will develop mild to moderate illness and recover without\n            hospitalization.\n          </p>\n          <br/>\n          <Tabs>\n            <TabList>\n              <Tab>Most common symptoms:</Tab>\n              <Tab>Less common symptoms:</Tab>\n              <Tab>Serious symptoms:</Tab>\n            </TabList>\n            <TabPanel>\n              <ul>\n                <li>fever</li>\n                <li>dry cough</li>\n                <li>tiredness</li>\n              </ul>\n            </TabPanel>\n            <TabPanel>\n              <ul>\n                <li>aches and pains</li>\n                <li>sore throat</li>\n                <li>diarrhoea</li>\n                <li>conjunctivitis</li>\n                <li>headache</li>\n                <li>loss of taste or smell</li>\n                <li>a rash on skin, or discolouration of fingers or toes</li>\n              </ul>\n            </TabPanel>\n            <TabPanel>\n              <ul>\n                <li>difficulty breathing or shortness of breath</li>\n                <li>chest pain or pressure</li>\n                <li>loss of speech or movement</li>\n              </ul>\n              <br/>\n              <p>\n                Seek immediate medical attention if you have serious symptoms.\n                Always call before visiting your doctor or health facility.\n              </p>\n              <br/>\n              <img src={Doctor} style={{ height: 350 }} />\n              <p>\n                People with mild symptoms who are otherwise healthy should manage\n                their symptoms at home.\n              </p>\n              <p>\n                On average it takes 5–6 days from when someone is infected with the\n                virus for symptoms to show, however it can take up to 14 days.\n              </p>\n            </TabPanel>\n          </Tabs>\n        </TabPanel>\n        <TabPanel>\n          <p>\n            Protect yourself and others around you by knowing the facts and\n            taking appropriate precautions. Follow advice provided by your local\n            public health agency. To prevent the spread of COVID-19:\n          </p>\n          <br/>\n          <Tabs>\n            <TabList>\n              <Tab>Clean hand</Tab>\n              <Tab>Social Distance</Tab>\n              <Tab>Don't touch eyes, nose, mouth</Tab>\n              <Tab>Avoid when cough or sneeze</Tab>\n              <Tab>Stay home</Tab>\n              <Tab>Follow the directions of health authority</Tab>\n            </TabList>\n            <TabPanel>\n                <p>Clean your hands often. Use soap and water, or an alcohol-based hand rub.</p>\n                <br/>\n                <img src={CleanHand} style={{ height: 350, width: 550 }} />\n            </TabPanel>\n            <TabPanel>\n              <p>Maintain a safe distance from anyone who is coughing or sneezing.</p>\n              <br/>\n              <img src={Distance} style={{ height: 350, width: 550 }} />\n            </TabPanel>\n            <TabPanel>\n              <p>Don’t touch your eyes, nose or mouth.</p>\n              <br/>\n              <img src={Touch} style={{ height: 350, width: 550 }} />\n            </TabPanel>\n            <TabPanel>\n              <p>Cover your nose and mouth with your bent elbow or a tissue when\n                you cough or sneeze.</p>\n              <br/>\n              <img src={Cover} style={{ height: 350, width: 550 }} />\n            </TabPanel>\n            <TabPanel>\n              <p>Stay home if you feel unwell. If you have a fever, cough and difficulty breathing, seek medical\n                attention. Call in advance.</p>\n              <br/>\n              <br/>\n              <Grid container spacing={2}>\n                <Grid item xs={2}>\n                  <p/>\n                </Grid>\n                <Grid item xs={3}>\n                <p><img src={Stayhome} style={{ height: 350, width: 550 }} /></p>\n                </Grid>\n                <Grid item xs={1}>\n                  <p/>\n                </Grid>\n                <Grid item xs={3}>\n                <p><img src={Call} style={{ height: 350, width: 550 }} /></p>\n                </Grid>\n                <Grid item xs={1}>\n                  <p/>\n                </Grid>\n              </Grid>\n            </TabPanel>\n            <TabPanel>\n              <p>\n                Avoiding unneeded visits to medical facilities allows healthcare\n                systems to operate more effectively, therefore protecting you and\n                others.\n              </p>\n              <br/>\n              <img src={Support} style={{ height: 350, width: 550 }} />\n            </TabPanel>\n          </Tabs>\n        </TabPanel>\n        <TabPanel>\n          <p>\n            To date, there are no specific vaccines or medicines for COVID-19.\n            Treatments are under investigation, and will be tested through\n            clinical trials. World Health Organization\n          </p>\n          <br/>\n          <hr />\n          <br/>\n          <p>Self-care</p>\n          <p>\n            If you feel sick you should rest, drink plenty of fluid, and eat\n            nutritious food. Stay in a separate room from other family members,\n            and use a dedicated bathroom if possible. Clean and disinfect\n            frequently touched surfaces.\n          </p>\n          <p>\n            Everyone should keep a healthy lifestyle at home. Maintain a healthy\n            diet, sleep, stay active, and make social contact with loved ones\n            through the phone or internet. Children need extra love and\n            attention from adults during difficult times. Keep to regular\n            routines and schedules as much as possible.\n          </p>\n          <p>\n            It is normal to feel sad, stressed, or confused during a crisis.\n            Talking to people you trust, such as friends and family, can help.\n            If you feel overwhelmed, talk to a health worker or counsellor.\n          </p>\n          <p>Medical treatments</p>\n          <p>\n            If you have mild symptoms and are otherwise healthy, self-isolate\n            and contact your medical provider or a COVID-19 information line for\n            advice.\n          </p>\n          <p>\n            Seek medical care if you have a fever, a cough, and difficulty\n            breathing. Call in advance.\n          </p>\n        </TabPanel>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default Symptom;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst Vaccine = () =>  {\n    return (\n        <div>\n            <div\n                style={{\n                    backgroundColor: \"white\",\n                    textAlign: \"center\",\n                }}\n            >\n                <h1> FAQ about vaccination in US </h1>\n                <br />\n                <br />\n            </div>\n        <div\n            style={{\n                backgroundColor: \"white\",\n                textAlign: \"left\",\n            }}\n        >\n            <br />\n            <p><b> 1. Can a COVID-19 vaccine make me sick with COVID-19?? </b></p>\n                <p>No. None of the authorized and recommended COVID-19 vaccines or COVID-19\n                    vaccines currently in development in the United States contain the live virus\n                    that causes COVID-19. This means that a COVID-19 vaccine cannot make you sick with COVID-19.</p>\n\n                    <p> There are several different types of vaccines in development.\n                        All of them teach our immune systems how to recognize and fight the virus that causes COVID-19.\n                        Sometimes this process can cause symptoms, such as fever.\n                        These symptoms are normal and are a sign that the body is\n                        building protection against the virus that causes COVID-19. Learn more about how COVID-19 vaccines work.</p>\n\n                    <p> It typically takes a few weeks for the body to build immunity (protection against the virus that causes COVID-19) after vaccination. That means it’s possible a person could be infected with the virus that causes COVID-19 just before or just after vaccination and still get sick. This is because the vaccine has not had enough time to provide protection.</p>\n            <br />\n            <p><b>2. After getting a COVID-19 vaccine, will I test positive for COVID-19 on a viral test? </b></p>\n                <p>Yes, you should be vaccinated regardless of whether you already had COVID-19. That’s because experts do not yet know how long you are protected from getting sick again after recovering from COVID-19. Even if you have already recovered from COVID-19, it is possible—although rare—that you could be infected with the virus that causes COVID-19 again.\n                    Learn more about why getting vaccinated is a safer way to build protection than getting infected.</p>\n            <p>If you were treated for COVID-19 with monoclonal antibodies or convalescent plasma, you should wait 90 days before getting a COVID-19 vaccine. Talk to your doctor if you are unsure what treatments you received or if you have more questions about getting a COVID-19 vaccine.</p>\n            <p>Experts are still learning more about how long vaccines protect against COVID-19 in real-world conditions. CDC will keep the public informed as new evidence becomes available.</p>\n            <br />\n            <p><b>3. Will a COVID-19 vaccination protect me from getting sick with COVID-19? </b></p>\n                <p>Yes. COVID-19 vaccination works by teaching your immune system how to recognize and fight the virus that causes COVID-19, and this protects you from getting sick with COVID-19.</p>\n                <p>Being protected from getting sick is important because even though many people with COVID-19 have only a mild illness, others may get a severe illness, have long-term health effects, or even die. There is no way to know how COVID-19 will affect you, even if you don’t have an increased risk of developing severe complications. Learn more about how COVID-19 vaccines work.</p>\n            <br />\n            <p><b>4. When will the vaccine be available to me? </b></p>\n                <p>Because the supply of COVID-19 vaccine in the United States is currently limited, CDC is providing recommendations to federal, state, and local governments about who should be vaccinated first. CDC’s recommendations are based on those of the Advisory Committee on Immunization Practices (ACIP), an independent panel of medical and public health experts.</p>\n                <p>Each state has its own plan for deciding which groups of people will be vaccinated first. You can contact your <a href=\"https://www.cdc.gov/publichealthgateway/healthdirectories/healthdepartments.html\">state health department</a>  for more information on its plan for COVID-19 vaccination.</p>\n                <p> The goal is for everyone to be able easily to get a COVID-19 vaccination as soon as large quantities of vaccine are available. As the vaccine supply increases, more groups will be added to receive vaccination. Learn more about CDC recommendations for who should get vaccinated first.</p>\n        </div>\n\n        <div\n            style={{\n                backgroundColor: \"white\",\n                textAlign: \"center\",\n            }}\n        >\n            <br/>\n            <h2>Find nearest vaccination centre</h2>\n            <div\n                style={{\n                    padding: \"20px\",\n                    backgroundColor: \"grey\",\n                    color: \"white\",\n                    margin: \"20px\",\n                    borderRadius: \"20px\",\n                }}\n            >\n                <h4>Find COVID-19 Vaccines Near You</h4>\n                <div style={{ fontSize: \"20px\" }}>\n                    {\" \"}\n                    <a\n                        href=\"https://vaccinefinder.org/search/\"\n                    >\n                        Click here\n                    </a>{\" \"}\n                </div>\n                <br />\n            </div>\n            <br />\n        </div>\n        </div>\n    );\n}\n\nexport default Vaccine;\n","import React from \"react\";\nimport \"../App.css\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nimport CleanHand from \"../img/bob_covid_large.jpg\";\nimport Distance from \"../img/social-distancing-together-6-feet.webp\";\nimport Doctor from \"../img/cartoon.jpg\";\nimport Spread from \"../img/spread.png\";\nimport Touch from \"../img/touch.jpg\";\nimport Cover from \"../img/Coronavirus-EN-2.png\";\nimport Stayhome from \"../img/download.jfif\";\nimport Call from \"../img/original.jfif\";\nconst Symptom = () => {\n  return (\n    <div style={{ margin: \"20px\" }}>\n      <Tabs>\n        <TabList>\n          <Tab><strong>General Use</strong></Tab>\n          <Tab><strong>lossary</strong></Tab>\n          <Tab><strong>Sources</strong></Tab>\n        </TabList>\n\n        <TabPanel>\n          <p><strong>\n            Here are some helpful tips for using this Covid Tracker:\n          </strong></p>\n          <br/>\n          <br/>\n          <ul>\n            <li>Begin by clicking on the date displayed on the home page. This will display a calendar for you to select what day you would like to see data for.\n              The most recently available day will always be yesterday because it takes some time for public data sources to update.\n              By default, the home page will load data for the most recent day. NOTE: The oldest data begins at January 21st, 2020.<br/></li>\n            <br/>\n            <li>There are green buttons at the top of the page that correspond to different types of data.\n              Click any of the buttons to modify the map and graphs according to the data you would like to display.\n              For visual clarity, each data type uses a unique color theme.\n              NOTE: The data source for hospitalization data has been discontinued, and that button is not available after March 7th 2021.\n              Similarly, publicly available vaccine data began on January 12th, and therefore is not available before then.<br/></li>\n            <br/>\n            <li> Once you select the date and data you would like to see, please scroll across our interactive map of the U.S.!\n              The map begins in the U.S. view.\n              Hover the mouse over any state to see a tooltip representing the number of the data for that day, as well as what percentage of the population in that state is represented by the data.\n              Left-click on any state to zoom into the state view and see a similar display for all the individual counties. Right-click within the map to zoom back out to the U.S. view.\n              As you zoom into a state, a button will pop up nearby. Clicking this button will open additional tabs that display graphs and news for that state.\n              If you click on a county, the graphs and news will update relative to the county that was selected.\n              The map displays a legend with a choropleth effect that shades states and counties based on the percentage of people affected in those areas relative to its population.</li>\n            <br/>\n            <li>There is also a graph on the home page that displays data for the entire U.S.!\n              All graphs provide the option to view trends for the last week, month, or year based on the date selected.<br/></li>\n            <br/>\n            <li> The News tab queries articles related to Covid in the state/county that is selected.\n              The date selected determines what date the most recent article must be published by to be shown.\n              NOTE: News articles older than a month before the present date will not be returned.<br/></li>\n            <br/>\n            <li>Finally, we have a search bar that allows users to quickly find the information they are interested in.\n              Begin typing a state or county name to narrow down the search bar to a list of options that when chosen will handle selecting the data options for you.\n              This feature is especially useful if you know the name of a state or county but not the location of it on the map.<br/></li>\n          </ul>\n        </TabPanel>\n        <TabPanel>\n          <p>\n            <strong>NOTE:</strong>  All data types display stats relative to the currently selected day and map region being viewed, and update accordingly.\n            For dates when either Hospitalization or Vaccination data is not available, the button will be replaced with an asterisk to indicate this is the reason.\n            Also, these two data types were not provided for county data, and indicate that within the map.\n          </p>\n        <br/>\n          <ul>\n            <li><p>\n              Cases: Total cases of Covid-19 up to the selected date within the current region (including both confirmed and probable).\n            </p></li>\n            <br/>\n            <li> <p>\n              New Cases: Total new cases of Covid-19 recorded in just the current day selected.\n            </p></li>\n            <br/>\n            <li> <p>\n              Deaths: Total deaths from Covid-19 up the selected date (including both confirmed and probable).\n            </p></li>\n            <br/>\n            <li><p>\n              Hospitalizations: Total number of people hospitalized due to Covid-19.\n            </p></li>\n            <br/>\n            <li><p>\n              Vaccinations: Total number of people who are documented as fully vaccinated (having received second or final dose).\n              Our vaccination data contains multiple stats which are all displayed in the vaccination graphs.\n            </p></li>\n            <br/>\n            <li> <p>\n              Vaccines Distributed: Total number of all vaccines delivered.\n            </p></li>\n            <br/>\n            <li><p>\n              Daily Vaccinations: Total number of people who were vaccinated that day.\n            </p></li>\n            <br/>\n            <li><p>\n              Second Dose: Total number of people who have received their second or last vaccine dose.\n            </p></li>\n            <br/>\n            <li><p>\n              First Dose: Total number of people who have received the first dose of their vaccine.\n            </p></li>\n          </ul>\n        </TabPanel>\n        <TabPanel>\n          <p>\n            <strong>DATA SOURCES</strong>\n          </p>\n          <br />\n          <ul>\n            <li>The New York times: https://github.com/nytimes/covid-19-data</li>\n            <li>Our World in Data: https://github.com/owid/covid-19-data</li>\n            <li>The COVID Tracking Project: https://covidtracking.com/</li>\n          </ul>\n        </TabPanel>\n\n      </Tabs>\n    </div>\n  );\n}\n\nexport default Symptom;\n","import React, { useEffect, useState } from \"react\";\nimport { Info, Chart, USMap, Calendar, Maps, Nav } from \"./components\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport home from \"./pages/home\";\nimport Detail from \"./pages/details\";\nimport About from \"./pages/About\";\nimport Symptom from \"./pages/Symptom\";\nimport Vaccine from \"./pages/Vaccine\";\nimport Infos from \"./pages/Infos\";\n\nconst App = () => {\n    return (\n        <div>\n            <Nav />\n            <br />\n            <Switch >\n                <Route exact path = \"/\"  component = { home }/>\n                <Route path = \"/about\" component = { About }/>\n                <Route path = \"/detail\"  component = {Detail}/>\n                <Route path = \"/infos\"  component = {Infos}/>\n                <Route path = \"/about\" component = { About }/>\n                <Route path = \"/symptom\" component = { Symptom }/>\n                <Route path = \"/vaccine\" component = { Vaccine }/>\n                <Route path = \"/about\" component = { About }/>\n            </Switch >\n        </div>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(<Router><App /> </Router>, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/spread.6770b4bb.png\";"],"sourceRoot":""}